#!/usr/bin/env python

import numpy, h5py, operator, argparse, logging
from pycbc import init_logging
import pycbc.conversions as convert
from pycbc import libutils
from pycbc.events import triggers
akde = libutils.import_optional('awkde')
kf = libutils.import_optional('sklearn.model_selection')

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--signal-file')
parser.add_argument('--template-file', required=True)
parser.add_argument('--min-mass', type=float, default=None,
                    help='Used only on signal masses')
parser.add_argument('--nfold-signal')
parser.add_argument('--nfold-template')
parser.add_argument('--fit-param', nargs='+', required=True,
                    help='Parameters over which KDE is calculated')
parser.add_argument('--log-param', nargs='+', choices=['True', 'False'], required=True)
parser.add_argument('--output-file', required=True)
parser.add_argument('--make-signal-kde', action='store_true')
parser.add_argument('--make-template-kde', action='store_true')
parser.add_argument('--verbose', action='count')
args = parser.parse_args()
init_logging(args.verbose)

def kde_awkde(x, x_grid, alp=0.5, gl_bandwidth='silverman', ret_kde=False):
    kde = akde.GaussianKDE(glob_bw=gl_bandwidth, alpha=alp, diag_cov=True)
    kde.fit(x)
    if isinstance(x_grid, (list, tuple, numpy.ndarray)) == False:
        y = kde.predict(x_grid)
    else:
        y = kde.predict(x_grid)
    if ret_kde == True:
        return kde, y
    return y

def kfcv_awkde(sample, bwchoice, alphachoice, k=2):
    if bwchoice not in ['silverman', 'scott']:
        bwchoice = float(bwchoice)
    fomlist = []
    kfold = kf.KFold(n_splits=k, shuffle=True, random_state=None)
    for train_index, test_index in kfold.split(sample):
        train, test = sample[train_index], sample[test_index]
        y = kde_awkde(train, test, alp=alphachoice, gl_bandwidth=bwchoice)
        fomlist.append(numpy.sum(numpy.log(y)))
    return numpy.mean(fomlist)

def optimizedparam(sampleval, nfold=2):
    bwgrid = ['scott', 'silverman']+numpy.logspace(-2,0,10).tolist()
    alphagrid = [1]
    FOM = {}
    for gbw in bwgrid:
        for alphavals in alphagrid:
            FOM[(gbw, alphavals)] = kfcv_awkde(sampleval, gbw, alphavals, k=nfold)
    optval = max(FOM.items(), key=operator.itemgetter(1))[0]
    optbw, optalpha  = optval[0], optval[1]
    maxFOM = FOM[(optbw, optalpha)]
    return optbw, optalpha

assert len(args.fit_param) == len(args.log_param)

if args.make_signal_kde and args.make_template_kde:
    parser.error("Choose only one option out of --make-signal-kde and --make-template-kde")

#calling template data and constructing template_kde_hdf_file over template params
temp_file = h5py.File(args.template_file, 'r')
mass1 = temp_file['mass1']
tid = numpy.arange(len(mass1))  #tid : integer or array of int for Indices of the entries to be returned
mass1, mass2, spin1z, spin2z = triggers.get_mass_spin(temp_file, tid)

template_pars = []
for param, slog in zip(args.fit_param, args.log_param):
    data = triggers.get_param(param, args, mass1, mass2, spin1z, spin2z)
    if slog in ['False']:
        logging.info('Using param: %s', param)
        template_pars.append(data)
    elif slog in ['True']:
        logging.info('Using log param: %s', param)
        template_pars.append(numpy.log(data))
    else:
        raise ValueError("invalid log param argument, use 'True', or 'False'")
sample1 = numpy.vstack((template_pars)).T

if args.make_template_kde:
    logging.info('Starting optimization of template KDE parameters')
    optbw, optalpha = optimizedparam(sample1, nfold=eval(args.nfold_template))
    logging.info('Evaluating template KDE')
    template_kde = kde_awkde(sample1, sample1, alp=optalpha, gl_bandwidth=optbw)

    with h5py.File(args.output_file, "w") as f_dest:
        f_dest.create_dataset("template_kde", data=template_kde)
        for name in args.fit_param:
            f_dest.create_dataset(name, data= triggers.get_param(name, args, mass1, mass2, spin1z, spin2z))
        f_dest.attrs['fit_param'] = args.fit_param
        f_dest.attrs['log_param'] = args.log_param
        with h5py.File(args.template_file, "r") as f_src:
            f_src.copy(f_src["./"], f_dest["./"], "input_template_file_params")

#calling signal data and constructing signal_kde_hdf file over template params
signal_pars = []
if args.make_signal_kde:
    signal_file = numpy.genfromtxt(args.signal_file, dtype = float, delimiter=',', names = True)
    mass2 = signal_file['mass2']
    N_original = len(mass2)
    if args.min_mass:
        idx = mass2 > args.min_mass
        mass2 = mass2[idx]
        logging.info('%i triggers out of %i with MASS2 > %s' %
                         (len(mass2), N_original, str(args.min_mass)))
    else:
        idx = numpy.full(N_original, True)
    mass1 = signal_file['mass1'][idx]
    assert min(mass1 - mass2) > 0

    for param, slog in zip(args.fit_param, args.log_param):
        data = signal_file[param]
        if slog in ['False']:
            logging.info('Using param: %s', param)
            signal_pars.append(data)
        elif slog in ['True']:
            logging.info('Using log param: %s', param)
            signal_pars.append(numpy.log(data))
        else:
            raise ValueError("invalid log param argument, use 'True', or 'False'")

    sample2 = numpy.vstack((signal_pars)).T
    logging.info('Starting optimization of signal KDE parameters')
    optbw, optalpha = optimizedparam(sample2, nfold=eval(args.nfold_signal))
    logging.info('Evaluating signal KDE')
    signal_kde = kde_awkde(sample2, sample1, alp=optalpha, gl_bandwidth=optbw)

    with h5py.File(args.output_file, "w") as f_dest:
        f_dest.create_dataset("signal_kde", data=signal_kde)
        f_dest.create_dataset("grid", data=sample1)
        f_dest.attrs['fit_param'] = args.fit_param
        f_dest.attrs['log_param'] = args.log_param
        f_dest.create_dataset("input_signal_file_params", data=signal_file)
