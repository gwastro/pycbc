#!/usr/bin/env python

import numpy, h5py, argparse, logging
from pycbc import init_logging

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--kde-files', nargs='+', required=True,
                    help='HDF files with KDE values')
parser.add_argument('--output-file', required=True, help='Name of output HDF file')
parser.add_argument('--min-ratio', type=float,
                    help='Minimum ratio for template_kde relative to the maximum')
parser.add_argument('--verbose', action='store_true')
args = parser.parse_args()
init_logging(verbose=args.verbose, format='%(asctime)s %(message)s')


temp_files = [h5py.File(file, 'r') for file in args.template_files]
num_files = len(temp_files)
if num_files < 2:
    raise ValueError("At least two input files are required.")


# Creating output file and save datasets and attributes from input files
f_dest = h5py.File(args.output_file, 'w')
for name in temp_files[0]:
    if isinstance(temp_files[0][name], h5py.Dataset):
        if name == 'data_kde':
            data_combined = [temp_file['data_kde'][:] for temp_file in temp_files]
            template_kde = numpy.maximum.reduce(data_combined)
        elif all(isinstance(temp_file[name], h5py.Dataset) for temp_file in temp_files):
            dataset_values = [temp_file[name][:] for temp_file in temp_files]
            f_dest.create_dataset(name, data=dataset_values[0])

for attr_name in temp_files[0].attrs.keys():
    attr_values = [temp_file.attrs.get(attr_name) for temp_file in temp_files]
    if all(numpy.array_equal(attr_values[0], attr_val) for attr_val in attr_values[1:]):
        f_dest.attrs[attr_name] = attr_values[0]

if args.min_ratio is not None:
    logging.info(f'Applying minimum template KDE ratio {args.min_ratio}')
    f_dest.attrs['min-kde-ratio'] = args.min_ratio
    min_val = args.min_ratio * numpy.max(template_kde)
    template_kde = numpy.maximum(template_kde, min_val)
f_dest.create_dataset('data_kde', data=template_kde)

for temp_file in temp_files:
    temp_file.close()
f_dest.close()
logging.info('Done!')
