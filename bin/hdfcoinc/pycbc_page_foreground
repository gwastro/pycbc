#/usr/bin/python
"""
Make table of the foreground coincident events. Also includes ability to 
write FARs and p-values for intermediary hierarchical removal steps.
"""
import argparse
import h5py, logging, numpy
from pycbc.io import hdf
import h5py, numpy, logging
from pycbc.pnutils import mass1_mass2_to_mchirp_eta
import pycbc.results, pycbc.results.followup
from pycbc.results.versioning import save_fig_with_metadata
import pycbc.version
import sys

parser = argparse.ArgumentParser()
# General required options
parser.add_argument("--version", action="version", version=pycbc.version.git_verbose_msg)
parser.add_argument('--trigger-file')
parser.add_argument('--bank-file')
parser.add_argument('--single-detector-triggers', nargs='+', default=None)
parser.add_argument('--verbose', action='count')
parser.add_argument('--output-file')
parser.add_argument('--foreground-tag')
parser.add_argument('--num-coincs-to-write', type=int)
parser.add_argument('--hierarchical-rm-iterations', type=int, default=None,
                    help='Indicate which FARs to write to the table '
                         'based on the number of hierarchical removals done. '
                         'Choosing None defaults to giving the FARs after '
                         'all hierarchical removals were done depending on '
                         'previous configuration choices. Choosing 0 selects '
                         'writing the FARs prior to any hierarchical '
                         'removals. Choosing 1 means writing the FARs after '
                         'doing 1 hierarchical removal. The program will '
                         'fail if the user selects a number above the number '
                         'of hierarchical removals done. [default=None]')
args = parser.parse_args()

f = h5py.File(args.trigger_file, 'r')

# Parse which inclusive background to use for the plotting
h_num_rm = args.hierarchical_rm_iterations

try:
    h_iterations = f.attrs['hierarchical_removal_iterations']
except KeyError:
    h_iterations = None

if h_num_rm > h_iterations:
    raise ValueError('User requested FANs after %s hierarchical removals. '
                     'This many removals were not done.' % h_num_rm)

if args.verbose:
    log_level = logging.INFO
    logging.basicConfig(format='%(asctime)s : %(message)s', level=log_level)

if args.output_file.endswith('.xml') or args.output_file.endswith('.xml.gz'):
    if args.single_detector_triggers is None:
        err_msg = "If creating xml files must provide the single detector "
        err_msg += "trigger lists with --single-detector-triggers."
        raise ValueError(err_msg)

if h_num_rm >= 0:
    fortrigs = hdf.ForegroundTriggers(args.trigger_file, args.bank_file,
                                      sngl_files=args.single_detector_triggers,
                                      n_loudest=args.num_coincs_to_write,
                                      group='foreground_h%s' % h_num_rm)

else :
    fortrigs = hdf.ForegroundTriggers(args.trigger_file, args.bank_file,
                                      sngl_files=args.single_detector_triggers,
                                      n_loudest=args.num_coincs_to_write)

if args.output_file.endswith('.html'):
    # If hierarchical removals were done and the user wants to look at a
    # particular stage of hierarchical removals (h_num_rm), remove that
    # number of loudest triggers by stat from the list of triggers.
#    if h_num_rm >= 0:
#        fortrigs.ignore_x_loudest(h_num_rm)

    ifar = fortrigs.get_coincfile_array('ifar')
    ifar_exc = fortrigs.get_coincfile_array('ifar_exc')
    fap = fortrigs.get_coincfile_array('fap')
    fap_exc = fortrigs.get_coincfile_array('fap_exc')
    stat = fortrigs.get_coincfile_array('stat')
    time1 = fortrigs.get_coincfile_array('time1')
    time2 = fortrigs.get_coincfile_array('time2')
    mass1 = fortrigs.get_bankfile_array('mass1')
    mass2 = fortrigs.get_bankfile_array('mass2')
    spin1z = fortrigs.get_bankfile_array('spin1z')
    spin2z = fortrigs.get_bankfile_array('spin2z')

    # Write the correct false alarm rates and other significance values
    # to the table after h_num_rm hierarchical removals
 #   if h_num_rm >= 0:
        # Regenerate the list of inclusive ifar and fap from foreground
        # trigger id's from fortrigs.get_coincfile_array and stat file

#        trig_id1_table = fortrigs.get_coincfile_array('trigger_id1')
#        print "Loc 1"
#        print 'foreground_h%s/trigger_id1' % h_num_rm
#        trig_attempt = fortrigs.get_coincfile_array('foreground_h%s/trigger_id1' % h_num_rm)
#        print "Loc 2"

#        trig_id1_hrm = f['foreground_h%s/trigger_id1' % h_num_rm][:]
#        trig_id2_hrm = f['foreground_h%s/trigger_id2' % h_num_rm][:]

#        ifar_hrm = f['foreground_h%s/ifar' % h_num_rm][:]
#        fap_hrm = f['foreground_h%s/fap' % h_num_rm][:]

#        idx1_list = []
#        for i in range(len(trig_id1_table)):
#             for j in range(len(trig_id1_hrm)):
#                 if trig_id1_table[i] == trig_id1_hrm[j]:
#                     idx1_list.append(j)

#        for k in range(len(idx1_list)):
#            ifar[k] = ifar_hrm[idx1_list[k]]
#            fap[k] = fap_hrm[idx1_list[k]]

    mchirp, eta = mass1_mass2_to_mchirp_eta(mass1, mass2)

    columns = [ifar_exc, ifar, fap_exc, fap, stat,  time1,
               (time2-time1)*1000, mchirp, mass1, mass2, spin1z, spin2z]

    # Not supposed to use FAP anymore, nomenclature is p-value. Should be
    # fixed consistently accross PyCBC.
    names = ['Exc. IFAR (YR)', 'Inc. IFAR (YR)', 'Exc. FAP',
             'Inc. FAP', 'Ranking Statistic', 'End Time',
             'Time Diff. (ms)', 'mchirp', 'm1','m2', 's1z', 's2z']
    format_strings = ['#.###E0', '#.###E0', '#.##E0', '#.##E0', '##.###',
                      None, '##.##', '##.##', '##.##',
                      '##.##', '##.##', '##.##']

    if args.single_detector_triggers:
        single_snr = fortrigs.get_snglfile_array_dict('snr')
        single_chisq = fortrigs.get_snglfile_array_dict('chisq')
        single_chisq_dof = fortrigs.get_snglfile_array_dict('chisq_dof')

        columns.extend([single_snr[ifo] for ifo in single_snr.keys()])
        names.extend(["%s SNR" %(ifo) for ifo in single_snr.keys()])
        format_strings.extend(["##.##" for ifo in single_snr.keys()])
        columns.extend([single_chisq[ifo] / (single_chisq_dof[ifo] * 2 - 2) for ifo in single_chisq.keys()])
        names.extend(["%s Red. Chisq" %(ifo) for ifo in single_chisq.keys()])
        format_strings.extend(["##.##" for ifo in single_chisq.keys()])

    logging.info('Making table of foreground triggers')
    html_table = pycbc.results.table(columns, names, 
                                   format_strings=format_strings, page_size=10)

    kwds = { 'title' : 'Loudest Event Table', 
        'cmd' :' '.join(sys.argv), }
    save_fig_with_metadata(str(html_table), args.output_file, **kwds)

elif args.output_file.endswith('.xml') or args.output_file.endswith('.xml.gz'):
    fortrigs.to_coinc_xml_object(args.output_file)

