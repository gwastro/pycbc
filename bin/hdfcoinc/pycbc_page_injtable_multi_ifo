#!/usr/bin/env python
# Copyright (C) 2020 Koustav Chandra
""" Make a table of found injection information for multi-ifo
"""
import argparse, h5py, numpy, pycbc.results, pycbc.detector, sys
from pycbc.types import MultiDetOptionAction
import pycbc.pnutils, pycbc.events
import pycbc.version
from itertools import combinations

parser = argparse.ArgumentParser()
parser.add_argument("--version", action="version", version=pycbc.version.git_verbose_msg)
parser.add_argument('--injection-file', help='HDF File containing the matched injections')
parser.add_argument('--single-trigger-files', nargs='*', help="HDF format single detector trigger files", action=MultiDetOptionAction)
parser.add_argument('--verbose', action='count')
parser.add_argument('--show-missed', action='store_true')
parser.add_argument('--output-file')
args = parser.parse_args()

f = h5py.File(args.injection_file,'r')
inj = f['injections']
found_cols, found_names, found_formats = [], [], []

if args.show_missed:
    title = "Missed Injections"
    idx = f['missed/after_vetoes'][:]
else:
    title = "Found Injections"
    detectors = ['L1','H1','V1']
    found = f['found_after_vetoes']
    detector_list= numpy.array(list(combinations(detectors,2)))
    tdiff = []
    tdiff_str = []
    idx = found['injection_index'][:]
    for i in range(len(detector_list)):
        tdiff_1 = ((found[detector_list[i,0]+'/time'][:] - found[detector_list[i,1]+'/time'][:])*1000)
        tdiff.append(tdiff_1)
        tdiff_head= '%s - %s time (ms)' % (detector_list[i,0], detector_list[i,1])
        tdiff_str.append(tdiff_head)
        
    found_cols = found_cols +  [tdiff[0],tdiff[1],tdiff[2],found['stat'], found['fap_exc'], found['ifar_exc']]
    found_names = found_names + [tdiff_str[0],tdiff_str[1],tdiff_str[2],'Ranking Stat.', 'Exc FAP', 'Exc. IFAR']
    found_formats = found_formats + ['##.##', '##.##','##.##','##.##', '##.##', '##']
    ids = {detector:found[detector+'/trigger_id'][:] for detector in numpy.flip(detectors)}
    
    if args.single_trigger_files:
        for ifo in sorted(args.single_trigger_files,key=args.single_trigger_files.get):
            f = h5py.File(args.single_trigger_files[ifo], 'r')[ifo]
            i = ids[ifo]
            snr = f['snr'][:][i]
            chisq = f['chisq'][:][i] / (2 * f['chisq_dof'][:][i] - 2)
            newsnr = pycbc.events.ranking.newsnr(snr, chisq)
            
            found_names += ["%s SNR" % ifo, "CHISQ", "NewSNR"]
            found_cols += [snr, chisq, newsnr]
            found_formats += ['##.##', '##.##', '##.##']
        

dec_dist = numpy.maximum(inj['eff_dist_h'][:][idx], inj['eff_dist_l'][:][idx],
                         inj['eff_dist_v'][:][idx])
m1, m2 = inj['mass1'][:][idx], inj['mass2'][:][idx]
mchirp, eta = pycbc.pnutils.mass1_mass2_to_mchirp_eta(m1, m2)
dec_chirp_dist = pycbc.pnutils.chirp_distance(dec_dist, mchirp)

columns = [dec_chirp_dist, inj['end_time'][:][idx], m1, m2, mchirp, eta,
           inj['spin1x'][:][idx], inj['spin1y'][:][idx], inj['spin1z'][:][idx],
           inj['spin2x'][:][idx], inj['spin2y'][:][idx], inj['spin2z'][:][idx],
           inj['distance'][:][idx],
           inj['eff_dist_h'][:][idx], inj['eff_dist_l'][:][idx], inj['eff_dist_v'][:][idx]
           ] + found_cols
         
names = ['DChirp Dist', 'Inj Time', 'Mass1', 'Mass2', 'Mchirp', 'Eta',
         's1x', 's1y', 's1z',
         's2x', 's2y', 's2z', 
         'Dist',
         'Eff Dist (H)', '(L)','(V)',
        ] + found_names
format_strings = ['##.##', '##.##', '##.##', '##.##', '##.##', '##.##',
                  '##.##', '##.##', '##.##',
                  '##.##', '##.##', '##.##',
                  '##.##',
                  '##.##', '##.##' , '##.##'
                 ] + found_formats

html_table = pycbc.results.html_table(columns, names, 
                                 format_strings=format_strings, 
                                 page_size=20)
                                 
kwds = { 'title' : title, 
        'caption' : "A table of %s and their coincident statistic information." % title.lower(),
        'cmd' :' '.join(sys.argv), }
pycbc.results.save_fig_with_metadata(str(html_table), args.output_file, **kwds)
    