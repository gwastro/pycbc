#!/usr/bin/env python

# Copyright (C) 2015 Tito Dal Canton
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
Plot PyCBC's single-detector triggers over the search parameter space.
"""

import logging
import argparse
import numpy as np
import matplotlib
matplotlib.use('agg')
import pylab as pl
from matplotlib.colors import LogNorm
from matplotlib.ticker import LogLocator
import h5py
import pycbc.pnutils
import pycbc.events


def get_var(name, bank):
    if name in ['mass1', 'mass2', 'spin1z', 'spin2z']:
        return np.array(bank[name])
    elif name == 'mtotal':
        return np.array(bank['mass1']) + np.array(bank['mass2'])
    elif name == 'mchirp':
        mchirp, eta = pycbc.pnutils.mass1_mass2_to_mchirp_eta(
            np.array(bank['mass1']), np.array(bank['mass2']))
        return mchirp
    elif name == 'eta':
        mchirp, eta = pycbc.pnutils.mass1_mass2_to_mchirp_eta(
            np.array(bank['mass1']), np.array(bank['mass2']))
        return eta
    elif name == 'tau0':
        tau0, tau3 = pycbc.pnutils.mass1_mass2_to_tau0_tau3(
            np.array(bank['mass1']), np.array(bank['mass2']), 30)
        return tau0
    elif name == 'tau3':
        tau0, tau3 = pycbc.pnutils.mass1_mass2_to_tau0_tau3(
            np.array(bank['mass1']), np.array(bank['mass2']), 30)
        return tau3
    else:
        raise ValueError('Invalid variable %s' % name)


parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--single-trig-file', type=str, required=True,
                    help='Path to file containing single-detector triggers in HDF5 format')
parser.add_argument('--bank-file', type=str, required=True,
                    help='Path to file containing template bank in HDF5 format')
parser.add_argument('--veto-file', type=str,
                    help='Optional path to file containing veto segments')
parser.add_argument('--output-file', type=str, required=True,
                    help='Destination path for plot')
parser.add_argument('--x-var', type=str, required=True,
                    help='Parameter to plot on the x-axis')
parser.add_argument('--y-var', type=str, required=True,
                    help='Parameter to plot on the y-axis')
parser.add_argument('--z-var', required=True,
                    help='Quantity to plot on the color scale',
                    choices=['density', 'max(snr)', 'max(newsnr)'])
parser.add_argument('--detector', type=str, required=True,
                    help='Detector')
parser.add_argument('--min-z', type=float, help='Optional minimum z value')
parser.add_argument('--max-z', type=float, help='Optional maximum z value')
opts = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

logging.info('Loading trigs')
trigs_f = h5py.File(opts.single_trig_file, 'r')
trigs = trigs_f[opts.detector]

if opts.veto_file:
    logging.info('Loading veto segments')
    time = trigs['end_time'][:]
    locs, segs = pycbc.events.veto.indices_outside_segments(
        time, opts.detector, [opts.veto_file])
else:
    locs = None

logging.info('Loading bank')
bank = h5py.File(opts.bank_file, 'r')
bank_x = get_var(opts.x_var, bank)
bank_y = get_var(opts.y_var, bank)

logging.info('Getting template params')
template_ids = np.array(trigs['template_id'])
snr = np.array(trigs['snr'])
rchisq = np.array(trigs['chisq']) / (np.array(trigs['chisq_dof']) * 2 - 2)
if locs is not None:
    template_ids = template_ids[locs]
    snr = snr[locs]
    rchisq = rchisq[locs]
x = bank_x[template_ids]
y = bank_y[template_ids]

hexbin_style = {
    'gridsize': 50,
    'mincnt': 1,
    'linewidths': 0.02
}
if opts.min_z is not None:
    hexbin_style['vmin'] = opts.min_z
if opts.max_z is not None:
    hexbin_style['vmax'] = opts.max_z

logging.info('Plotting')
fig = pl.figure()
ax = fig.gca()

if opts.z_var == 'density':
    norm = LogNorm()
    hb = ax.hexbin(x, y, norm=norm, vmin=1, **hexbin_style)
    fig.colorbar(hb, ticks=LogLocator(subs=range(10)))
elif opts.z_var == 'max(snr)':
    norm = LogNorm()
    hb = ax.hexbin(x, y, C=snr, norm=norm, reduce_C_function=max,
                   **hexbin_style)
    fig.colorbar(hb, ticks=LogLocator(subs=range(10)))
elif opts.z_var == 'max(newsnr)':
    newsnr = pycbc.events.newsnr(snr, rchisq)
    hb = ax.hexbin(x, y, C=newsnr, reduce_C_function=max,
                   **hexbin_style)
    fig.colorbar(hb)

ax.set_xlabel(opts.x_var)
ax.set_ylabel(opts.y_var)
ax.set_title(opts.z_var + ' for ' + opts.detector)
fig.savefig(opts.output_file, dpi=200)

logging.info('Done')
