#!/usr/bin/env python

# Copyright (C) 2019 Gino Contestabile, Francesco Pannarale
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# =============================================================================
# Preamble
# =============================================================================

from __future__ import division

import sys
import glob
import os,copy
from glue import segments
from glue.ligolw import utils,lsctables,ligolw,table
import pycbc.version
#from pycbc.results.pygrb_plotting_utils import PygrbFilterOutput, pygrb_plotter,pygrb_plot_opts_parser
from pycbc.results.pygrb_plotting_utils import *
##### TODO: remove these dependencies!
from pylal import MultiInspiralUtils
from pylal.dq import dqSegmentUtils
from pylal.coh_PTF_pyutils import calculate_contours, readSegFiles
#####

__author__  = "Francesco Pannarale <francesco.pannarale@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__ = pycbc.version.date
__program__ = "pycbc_pygrb_plot_skygrid"


# =============================================================================
# Main script starts here
# =============================================================================

description = 'pycbc_pygrb_plot_skygrid will produce the sky grid plot.'
usage = __program__ + ' [--options]'
opts = pygrb_plot_opts_parser(usage=usage, description=description, version=__version__)

trigFile  = os.path.abspath(opts.trig_file)
outfile       = opts.output_file
#segdir      = opts.segment_dir
chisq_index = opts.chisq_index
chisq_nhigh = opts.chisq_nhigh
null_thresh = map(float, opts.null_snr_threshold.split(','))
vetoFiles = []
if opts.veto_directory:
  vetoString = ','.join([str(i) for i in range(2,opts.veto_category+1)])
  vetoFiles = glob.glob(opts.veto_directory +'/*CAT[%s]*.xml' %(vetoString))
snrThresh = opts.snr_threshold
snglSnrThresh = opts.sngl_snr_threshold
newSnrThresh = opts.newsnr_threshold
nullGradThresh = opts.null_grad_thresh
nullGradVal    = opts.null_grad_val
verbose   = opts.verbose

if verbose:
  sys.stdout.write("Imported and ready to go.\n")

# Set output directory
outdir = os.path.split(os.path.abspath(outfile))[0]
if not os.path.isdir(outdir):
  os.makedirs(outdir)


#
# Load triggers
#

if verbose:
  sys.stdout.write("Loading triggers...\n")

# Load file
xmldoc = utils.load_filename(trigFile, gz=trigFile.endswith("gz"), contenthandler = lsctables.use_in(ligolw.LIGOLWContentHandler))
searchSumm = table.get_table(xmldoc, lsctables.SearchSummaryTable.tableName)

# Extract IFOS
ifos = sorted(map(str, searchSumm[0].get_ifos()))

tmp, slideDict, segmentDict = \
        MultiInspiralUtils.ReadMultiInspiralTimeSlidesFromFiles([trigFile])
numSlides = len(slideDict)
lsctables.MultiInspiralTable.loadcolumns =\
        [slot for slot in tmp[0].__slots__ if hasattr(tmp[0], slot)]
trigs = lsctables.New(lsctables.MultiInspiralTable,\
        columns=lsctables.MultiInspiralTable.loadcolumns)

# Construct veto list
vetoes = segments.segmentlistdict()
for ifo in ifos:
  vetoes[ifo] = segments.segmentlist()

if vetoFiles:
  for file in vetoFiles:
    ifo = os.path.basename(file)[:2]
    if ifo in ifos:
      # This returns a coalesced list of the vetoes
      tmpVetoSegs = dqSegmentUtils.fromsegmentxml(open(file,'r'))
      for entry in tmpVetoSegs:
        vetoes[ifo].append(entry)

for ifo in ifos:
  vetoes[ifo].coalesce()

for slideID in range(numSlides):
  slidVetoes = copy.deepcopy(vetoes)
  for ifo in ifos:
    slidVetoes[ifo].shift(-slideDict[slideID][ifo])

  # Load triggers
  vets = slidVetoes.union(slidVetoes.keys())
  trigs.extend(t for t in tmp.veto(vets) if int(t.time_slide_id) == slideID)

# Extract trigger data
trigData = PygrbFilterOutput(trigs, ifos, lsctables.MultiInspiralTable.loadcolumns, "triggers", \
  chisq_index, chisq_nhigh, null_thresh, snrThresh, snglSnrThresh, newSnrThresh, nullGradThresh, nullGradVal, verbose=verbose)# opts better?



#
# Generate sky grid plot
#

xlabel = "Longitude (Degrees)"
ylabel = "Latitude (Degrees)"

if verbose:
  sys.stdout.write("\nPlotting...\n")
  fig_name = os.path.split(os.path.abspath(outfile))[1]
  sys.stdout.write(" * %s (%s vs %s)...\n" % (fig_name, xlabel, ylabel))

fig = plt.figure()
ax  = fig.gca()
ax.set_title("PyGRB Sky Grid")#, fontsize=18)
ax.set_xlabel(xlabel)#, fontsize=16)
ax.set_ylabel(ylabel)#, fontsize=16)
ax.plot(trigData.longitude, trigData.latitude, 'ko', markerfacecolor='blue')
# Wrap up
save_fig_with_metadata(fig, outfile)
                       #fig_kwds=fig_kwds, title=plot_title,
                       #cmd=' '.join(sys.argv),
                       #caption=plot_caption)
plt.close()
