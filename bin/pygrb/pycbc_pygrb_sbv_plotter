#!/usr/bin/env python

# Copyright (C) 2019 Ian W. Harry, Gino Contestabile, Francesco Pannarale
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# =============================================================================
# Preamble
# =============================================================================

from __future__ import division

# set up timer
import time
start = int(time.time()*10**6)
elapsed_time = lambda: int(time.time()*10**6-start)

import sys
import glob
import numpy
import os,matplotlib,copy
matplotlib.use('Agg')
from matplotlib import rc
import matplotlib.pyplot as plt
import scipy.stats
from optparse import OptionParser
from glue import segments
from lal import LIGOTimeGPS
from glue.ligolw import lsctables,table,utils,ligolw
import pycbc.version
from pycbc.results.pygrb_plotting_utils import sbv_plot_handler
#### TODO: remove these dependencies!
from pylal import MultiInspiralUtils
from pylal.dq import dqSegmentUtils
from pylal.coh_PTF_pyutils import get_bestnr, calculate_contours, readSegFiles, get_det_response
####

__author__  = "Ian Harry <ian.harry@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__ = pycbc.version.date
__program__ = "pycbc_pygrb_sbv_plotter"


# =============================================================================
# Format single detector chi-square data as numpy array and floor at 0.005
# =============================================================================

def format_single_chisqs(trigIfoCS, trigs, ifos):
  for ifo in ifos:
    trigIfoCS[ifo] = numpy.asarray(trigIfoCS[ifo])
    numpy.putmask(trigIfoCS[ifo], trigIfoCS[ifo]==0, 0.005)

  return trigIfoCS


# =============================================================================
# Extract trigger/injection data produced by PyGRB
# =============================================================================
class pygrb_filter_output(object):
  def __init__(self, trigs_or_injs, ifos, columns, output_type, chisq_index, chisq_nhigh, null_thresh, snrThresh, snglSnrThresh, newSnrThresh, nullGradThresh, nullGradVal, verbose=False):
    if verbose:
      sys.stdout.write("Extracting data related to the %s just loaded...\n" % output_type)
    # Initialize all content of self
    self.Time = None
    self.SNR = numpy.array(None)
    self.ReweightedSNR = None
    self.NullSNR = None
    self.Nullstat = None
    self.TraceSNR = None
    self.ChiSquare = numpy.array(None)
    self.BankVeto = None
    self.AutoVeto = None
    self.CoincSNR = None
    self.IfoSNR = dict((ifo, None) for ifo in ifos)
    self.FirstSNR = None
    self.SecondSNR = None
    self.ThirdSNR = None
    self.IfobankCS = dict((ifo, None) for ifo in ifos)
    self.IfoautoCS = dict((ifo, None) for ifo in ifos)
    self.IfostanCS = dict((ifo, None) for ifo in ifos)
    self.RelAmp1 = None
    self.Norm3 = None
    self.RelAmp2 = None
    self.Inclination = None
    # Exctract data and fill in content of self
    if trigs_or_injs is not None:
      # Work out if using sngl chisqs
      ifoAtt = { 'G1':'g', 'H1':'h1', 'H2':'h2', 'L1':'l', 'V1':'v', 'T1':'t' } 
      i = ifoAtt[ifos[0]]
  
      self.sngl_chisq      = 'chisq_%s' % i in columns
      self.sngl_bank_chisq = 'bank_chisq_%s' % i in columns
      self.sngl_cont_chisq = 'cont_chisq_%s' % i in columns
      
      # Set basic data
      self.Time          = numpy.asarray(trigs_or_injs.get_end())
      self.SNR           = numpy.asarray(trigs_or_injs.get_column('snr'))
      self.ReweightedSNR = [get_bestnr(t,q=chisq_index, n=chisq_nhigh,\
                                       null_thresh=null_thresh,snr_threshold=snrThresh,\
                                       sngl_snr_threshold = snglSnrThresh,\
                                       chisq_threshold = newSnrThresh,\
                                       null_grad_thresh = nullGradThresh,\
                                       null_grad_val = nullGradVal) for t in trigs_or_injs]
      self.ReweightedSNR = numpy.array(self.ReweightedSNR)
      self.NullSNR       = numpy.asarray(trigs_or_injs.get_null_snr())
      self.Nullstat      = numpy.asarray(trigs_or_injs.get_column('null_statistic'))
      self.TraceSNR      = numpy.asarray(trigs_or_injs.get_column('null_stat_degen'))
    
      # Get chisq data
      self.ChiSquare = numpy.asarray(trigs_or_injs.get_column('chisq'))
      self.BankVeto  = numpy.asarray(trigs_or_injs.get_column('bank_chisq')) 
      self.AutoVeto  = numpy.asarray(trigs_or_injs.get_column('cont_chisq'))
      numpy.putmask(self.ChiSquare, self.ChiSquare==0, 0.005)
      numpy.putmask(self.BankVeto, self.BankVeto==0, 0.005)
      numpy.putmask(self.AutoVeto, self.AutoVeto==0, 0.005)
       
      # Get single detector data
      self.CoincSNR  = (trigs_or_injs.get_column('coinc_snr'))
      self.IfoSNR    = dict((ifo, trigs_or_injs.get_sngl_snr(ifo)) for ifo in ifos)
      tmp           = numpy.sort(self.IfoSNR.values(), 0)
      if len(ifos) > 0:
        self.FirstSNR  = tmp[-1,:]
      if len(ifos) > 1:
        self.SecondSNR = tmp[-2,:]
      if len(ifos) > 2:
        self.ThirdSNR  = tmp[-3,:]
      if self.sngl_bank_chisq:
        self.IfobankCS = trigs_or_injs.get_sngl_bank_chisqs(ifos)
        self.IfobankCS = format_single_chisqs(self.IfobankCS, trigs_or_injs, ifos)
      if self.sngl_cont_chisq:
        self.IfoautoCS = trigs_or_injs.get_sngl_cont_chisqs(ifos)
        self.IfoautoCS = format_single_chisqs(self.IfoautoCS, trigs_or_injs, ifos)
      if self.sngl_chisq:
        self.IfostanCS = trigs_or_injs.get_sngl_chisqs(ifos)
        self.IfostanCS = format_single_chisqs(self.IfostanCS, trigs_or_injs, ifos)
      
      # Initiate amplitude generator
      numAmp  = 4
      amplitudes = xrange(1,numAmp+1)
    
      # Get amplitude terms
      Amp              = dict((amp,\
                               numpy.asarray(trigs_or_injs.get_column('amp_term_%d' % amp)))\
                               for amp in amplitudes)
      #print numpy.count_nonzero(Amp[1]) # All trigAmp's are 0
      #print numpy.count_nonzero(Amp[2]) # Hence the 3 warnings
      #print numpy.count_nonzero(Amp[3])
      #print numpy.count_nonzero(Amp[4])
      self.RelAmp1     = numpy.sqrt((Amp[1]**2 + Amp[2]**2)/\
                                    (Amp[3]**2 + Amp[4]**2))
      GammaR           = Amp[1] - Amp[4]
      GammaI           = Amp[2] + Amp[3]
      DeltaR           = Amp[1] + Amp[4]
      DeltaI           = Amp[3] - Amp[2]
      Norm1            = DeltaR*DeltaR + DeltaI*DeltaI
      Norm2            = GammaR*GammaR + GammaI*GammaI
      self.Norm3       = ((Norm1**0.25) + (Norm2**0.25))**2
      AmpPlus          = (Norm1)**0.5 + (Norm2)**0.5
      AmpCross         = abs((Norm1)**0.5 - (Norm2)**0.5)
      self.RelAmp2     = AmpPlus/AmpCross
      self.Inclination = AmpCross/self.Norm3
      
      num_trigs_or_injs = len(trigs_or_injs)
      if num_trigs_or_injs<1:
        sys.stderr.write("WARNING: No %s found." % output_type)
      elif num_trigs_or_injs >= 1 and verbose:
        sys.stdout.write("%d %s found at %d.\n"\
                         % (num_trigs_or_injs, output_type, elapsed_time()))
      if(output_type == "triggers"):
        Sigma  = trigs_or_injs.get_sigmasqs()
        self.SigmaTot = numpy.zeros(num_trigs_or_injs)
        # Get antenna response based parameters
        self.Longitude = numpy.degrees(trigs_or_injs.get_column('ra'))
        self.Latitude  = numpy.degrees(trigs_or_injs.get_column('dec'))
        self.fResp = dict((ifo, numpy.empty(num_trigs_or_injs)) for ifo in ifos)
        for i in xrange(num_trigs_or_injs):
          # Calculate fResp for each IFO is we haven't done so already
          fPlus,fCross     = get_det_response(self.Longitude[i], self.Latitude[i],\
                                              self.Time[i])
          for ifo in ifos:
            self.fResp[ifo][i]   = sum(numpy.array([fPlus[ifo], fCross[ifo]])**2)
            self.SigmaTot[i]    += Sigma[ifo][i] * self.fResp[ifo][i]
        
        for ifo in ifos:
          self.fResp[ifo] = self.fResp[ifo].mean()
        
        # Normalise trigSigma
        self.SigmaTot = numpy.array(self.SigmaTot)
        for ifo in ifos:
          Sigma[ifo] = numpy.asarray(Sigma[ifo]) / self.SigmaTot
        
        self.SigmaMean = {}
        self.SigmaMax  = {}
        self.SigmaMin  = {}
        for ifo in ifos:
          try:
            self.SigmaMean[ifo] = Sigma[ifo].mean()
            self.SigmaMax[ifo]  = Sigma[ifo].max()
            self.SigmaMin[ifo]  = Sigma[ifo].min()
          except ValueError:
            self.SigmaMean[ifo] = 0
            self.SigmaMax[ifo]  = 0
            self.SigmaMin[ifo]  = 0
    if verbose:
      sys.stdout.write("%s parameters extracted at %d\n"\
                       % (output_type, elapsed_time()))


# =============================================================================
# Create filename tags for zoomed and non-zoomed plots 
# =============================================================================

def generate_raw_zoom_tags(run_tag, plot_tag):
  fig_tag_raw = "%s_%s" % (run_tag, plot_tag) 
  fig_tag_zoom = "%s_%s" % (fig_tag_raw, "zoom")

  return [fig_tag_raw, fig_tag_zoom]


# =============================================================================
# Parse command line
# =============================================================================

def parse_command_line():

  usage = """usage: %prog [options] 
  
pylal_cbc_cohptf_sbv_plotter will calculate all signal based vetoes and the final detection statistics, whilst plotting a whole bunch of stuff. Required arguments

--trig-file
--grb-name
"""

  parser = OptionParser(usage, version=__version__)

  parser.add_option("-v", "--verbose", action="store_true", default=False,\
                    help="verbose output, default: %default")

  parser.add_option("-t", "--trig-file", action="store", type="string",\
                    default=None, help="The location of the trigger file")

  parser.add_option("-I", "--inj-file", action="store", type="string",\
                    default=None, help="The location of the injection file")

  parser.add_option("-n", "--grb-name", action="store", type="string",\
                    default=None, help="Name of the GRB such as 090802")

  parser.add_option("-o", "--output-path", action="store", type="string",\
                    default=os.getcwd(), help="output directory, "+\
                                              "default: %default")

  parser.add_option("-Q", "--chisq-index", action="store", type="float",\
                    default=4.0, help="chisq_index for newSNR calculation, "+\
                                      "default: %default")

  parser.add_option("-N", "--chisq-nhigh", action="store", type="float",\
                    default=3.0, help="nhigh for newSNR calculation, "+\
                                      "default: %default")

  parser.add_option("-a", "--segment-dir", action="store", type="string",\
                    help="directory holding buffer, on and off source "+\
                         "segment files.")

  parser.add_option("-B", "--sngl-snr-threshold", action="store", type="float",\
                    default=4.0, help="Single detector SNR threshold, the"+\
                    "two most sensitive detectors should have SNR above this"+\
                    " default: %default")

  parser.add_option("-d", "--snr-threshold", action="store", type="float",\
                    default=6.0, help="SNR threshold for recording triggers,"+\
                                      " default: %default")

  parser.add_option("-c", "--newsnr-threshold", action="store", type="float",\
                    default=None, help="NewSNR threshold for calculating the "+\
                    "chisq of triggers (based on value of auto and bank chisq"+\
                    " values. By default will take the same value as "+\
                    "snr-threshold")

  parser.add_option("-A", "--null-snr-threshold", action="store",\
                    type="string", default="4.25,6",\
                    help="comma separated lower,higher null SNR thresholds, "+\
                         " for null SNR cut, default: \"%default\"")

  parser.add_option("-C", "--null-grad-thresh", action="store", type="float",\
                    default=20., help="Threshold above which to increase the,"+\
                    "values of the null SNR cut. default: %default")

  parser.add_option("-D", "--null-grad-val", action="store", type="float",\
                    default=0.2, help="Rate the null SNR cut will increase"+\
                    "above the threshold. default: %default")

  parser.add_option("-l", "--veto-directory",action="store",type="string",\
                    default=None,\
                    help="The location of the CATX veto files")

  parser.add_option("-b", "--veto-category",action="store",type="int",\
                   default=None, help="Apply vetoes up to this level inclusive")

  (opts,args) = parser.parse_args()

  if not opts.trig_file:
    parser.error("must provide trig file")

  if not opts.grb_name:
    parser.error("must provide --grb-name")

  if not opts.segment_dir:
    parser.error("must provide --segment-dir")

  if opts.veto_directory and not opts.veto_category:
    parser.error("Must supply veto category if applying vetoes")

  if not opts.newsnr_threshold:
    opts.newsnr_threshold = opts.snr_threshold

  return opts, args


# =============================================================================
# Main script starts here
# =============================================================================

# Read in options

opts, args = parse_command_line()

trigFile  = os.path.abspath(opts.trig_file)
injFile   = None
if opts.inj_file:
  injFile = os.path.abspath(opts.inj_file)
tag       = 'GRB%s' % opts.grb_name
outdir    = os.path.abspath(opts.output_path)
segdir    = opts.segment_dir
chisq_index = opts.chisq_index
chisq_nhigh = opts.chisq_nhigh
null_thresh = map(float, opts.null_snr_threshold.split(','))
vetoFiles = []
if opts.veto_directory:
  vetoString = ','.join([str(i) for i in range(2,opts.veto_category+1)])
  vetoFiles = glob.glob(opts.veto_directory +'/*CAT[%s]*.xml' %(vetoString))
snrThresh = opts.snr_threshold
snglSnrThresh = opts.sngl_snr_threshold
newSnrThresh = opts.newsnr_threshold
nullGradThresh = opts.null_grad_thresh
nullGradVal    = opts.null_grad_val
verbose   = opts.verbose

if verbose:
  sys.stdout.write("Imported and ready to go at %d.\n" % elapsed_time())

# Set output directory
if not os.path.isdir(outdir):
  os.makedirs(outdir)

# Get rcParams
rc('font', size=14)
#makePaperPlots() # in coh_PTF_pyutils.py

#
# Load triggers
#

if verbose:
  sys.stdout.write("Loading triggers...\n")

# Load file
xmldoc = utils.load_filename(trigFile, gz=trigFile.endswith("gz"), contenthandler = lsctables.use_in(ligolw.LIGOLWContentHandler))
searchSumm = table.get_table(xmldoc, lsctables.SearchSummaryTable.tableName)

# Extract IFOS
ifos = sorted(map(str, searchSumm[0].get_ifos()))

tmp, slideDict, segmentDict = \
        MultiInspiralUtils.ReadMultiInspiralTimeSlidesFromFiles([trigFile])
numSlides = len(slideDict)
lsctables.MultiInspiralTable.loadcolumns =\
        [slot for slot in tmp[0].__slots__ if hasattr(tmp[0], slot)]
trigs = lsctables.New(lsctables.MultiInspiralTable,\
        columns=lsctables.MultiInspiralTable.loadcolumns)

# Construct veto list
vetoes = segments.segmentlistdict()
for ifo in ifos:
  vetoes[ifo] = segments.segmentlist()

if vetoFiles:
  for file in vetoFiles:
    ifo = os.path.basename(file)[:2]
    if ifo in ifos:
      # This returns a coalesced list of the vetoes
      tmpVetoSegs = dqSegmentUtils.fromsegmentxml(open(file,'r'))
      for entry in tmpVetoSegs:
        vetoes[ifo].append(entry)

for ifo in ifos:
  vetoes[ifo].coalesce()

for slideID in range(numSlides):
  slidVetoes = copy.deepcopy(vetoes)
  for ifo in ifos:
    slidVetoes[ifo].shift(-slideDict[slideID][ifo])

  # Load triggers
  vets = slidVetoes.union(slidVetoes.keys())
  trigs.extend(t for t in tmp.veto(vets) if int(t.time_slide_id) == slideID)

# Extract trigger data
trigData = pygrb_filter_output(trigs, ifos, lsctables.MultiInspiralTable.loadcolumns, "triggers", \
  chisq_index, chisq_nhigh, null_thresh, snrThresh, snglSnrThresh, newSnrThresh, nullGradThresh, nullGradVal, verbose=verbose)# opts better?


#
# Load injections
#

injs = None
if injFile:
  if verbose:
    sys.stdout.write("\nLoading injections...\n")
  xmldoc = utils.load_filename(injFile, gz=injFile.endswith("gz"), contenthandler = lsctables.use_in(ligolw.LIGOLWContentHandler))
  tmp = table.get_table(xmldoc, lsctables.MultiInspiralTable.tableName)
  injs = lsctables.New(lsctables.MultiInspiralTable,\
                      columns=lsctables.MultiInspiralTable.loadcolumns)
  injs.extend(t for t in tmp if t.get_end() not in vetoes)
  if verbose:
    sys.stdout.write("%d injections found at %d.\n"\
                     % (len(injs), elapsed_time()))

# Extract injection data
injData = pygrb_filter_output(injs, ifos, lsctables.MultiInspiralTable.loadcolumns, "injections", \
  chisq_index, chisq_nhigh, null_thresh, snrThresh, snglSnrThresh, newSnrThresh, nullGradThresh, nullGradVal, verbose=verbose)# opts better?


#
# Generate plots
#

if verbose:
  sys.stdout.write("\nPlotting...\n")

ptfcolormap = plt.cm.spring
ptfcolormap.set_over('g')
     
new_snrs = [5.5,6,6.5,7,8,9,10,11]
try:
  cont_value = new_snrs.index(newSnrThresh)
except ValueError:
  new_snrs.append(newSnrThresh)
  cont_value = -1
bank_conts, auto_conts,chi_conts,null_cont,snr_vals, colors =\
    calculate_contours(q=chisq_index, n=chisq_nhigh,new_snrs=new_snrs,\
                       new_snr_thresh=newSnrThresh,\
                       null_thresh=null_thresh[-1],\
                       null_grad_snr=nullGradThresh,\
                       null_grad_val=nullGradVal,\
                       chisq_dof=trigs[0].chisq_dof,\
                       bank_chisq_dof=trigs[0].bank_chisq_dof,\
                       cont_chisq_dof=trigs[0].cont_chisq_dof)

# Reset times
segs = readSegFiles(segdir)
grbTime = segs['on'][1] - 1
start = int(min(trigData.Time)) - grbTime
end   = int(max(trigData.Time)) - grbTime
duration = end-start
start -= duration*0.05
end += duration*0.05
trigData.Time = [t-grbTime for t in trigData.Time]
if injFile:
  injData.Time  = [t-grbTime for t in injData.Time]


# Plot SNR timeseries
for injF in numpy.unique([None, injFile]):
  # Coherent SNR versus time
  fig_tag = '%s_%s' % (tag, "triggers_vs_time") 
  sbv_plot_handler(trigData.Time, trigData.SNR, injData.Time, injData.SNR, injF, \
              "Time since %s" % (grbTime), "Coherent SNR", outdir, fig_tag,
              xlims=[start,end], use_logs=False, verbose=verbose)
  # Reweighted SNR versus time
  fig_tag = '%s_%s' % (tag, "reweighted_snr_vs_time") 
  sbv_plot_handler(trigData.Time, trigData.ReweightedSNR, injData.Time, \
              injData.ReweightedSNR, injF, "Time since %s" % (grbTime), \
              "Reweighted SNR", outdir, fig_tag, xlims=[start,end], \
              use_logs=False, verbose=verbose)
  # Single IFO SNR versus time
  for ifo in ifos:
    fig_tag = '%s_%s_%s' % (tag, ifo, "triggers_vs_time") 
    sbv_plot_handler(trigData.Time, trigData.IfoSNR[ifo], injData.Time, injData.IfoSNR[ifo], injF, \
                "Time since %s" % (grbTime), "%s SNR" % (ifo), outdir, fig_tag,
                xlims=[start,end], use_logs=False, verbose=verbose)


# Coherent SNR versus null stat plots: non-zoomed and zoomed 
null_stat_colors = ['k-', 'g-', 'm-']
fig_tag_list = generate_raw_zoom_tags(tag, "null_stat_vs_snr")
null_stat_conts_1 = [null_cont]
null_stat_conts_2 = [null_cont]
null_thresh_width = null_thresh[1] - null_thresh[0]
null_stat_conts_2.append(numpy.asarray(null_cont) - null_thresh_width)
if null_thresh_width > 1:
   null_stat_conts_2.append(numpy.asarray(null_cont) - null_thresh_width + 1)
null_stat_conts_list = [null_stat_conts_1, null_stat_conts_2]
xlims_list = [None, [6,30]]
ylims_list = [None, [0,30]]
for fig_tag, null_stat_conts, xlims, ylims in \
             zip(fig_tag_list, null_stat_conts_list, xlims_list, ylims_list):
  sbv_plot_handler(trigData.SNR, trigData.Nullstat, injData.SNR, injData.Nullstat, injFile, \
                   "Coherent SNR", "Null statistic", outdir, fig_tag, \
                   snr_vals=snr_vals, conts=null_stat_conts, \
                   colors=null_stat_colors, xlims=xlims, ylims=ylims, \
                   use_logs=False, verbose=verbose)


# Coherent SNR versus overwhitened null stat plots: non-zoomed and zoomed
fig_tag_list = generate_raw_zoom_tags(tag, "null_stat2_vs_snr")
null_stat_conts_1 = [null_cont]
null_stat_conts_2 = [null_cont]
null_thresh_width = null_thresh[1] - null_thresh[0]
null_stat_conts_2.append(numpy.asarray(null_cont) - null_thresh_width)
if null_thresh_width > 1:
   null_stat_conts_2.append(numpy.asarray(null_cont) - null_thresh_width + 1)
null_stat_conts_list = [null_stat_conts_1, null_stat_conts_2]
xlims_list = [None, [6,30]]
ylims_list = [None, [0,30]]
for fig_tag, null_stat_conts, xlims, ylims in \
             zip(fig_tag_list, null_stat_conts_list, xlims_list, ylims_list):
  sbv_plot_handler(trigData.SNR, trigData.NullSNR, injData.SNR, injData.NullSNR, injFile, \
                   "Coherent SNR", "Overwhitened null statistic", outdir, fig_tag, \
                   snr_vals=snr_vals, conts=null_stat_conts, \
                   shade_cont_value=0, colors=null_stat_colors, \
                   xlims=xlims, ylims=ylims, use_logs=False, verbose=verbose)


# Coherent SNR versus coinc SNR plots: non-zoomed and zoomed
fig_tag_list = generate_raw_zoom_tags(tag, "coinc_snr_vs_snr")
xlims_list = [None, [6,30]]
ylims_list = [None, [4,30]]
for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  sbv_plot_handler(trigData.SNR, trigData.CoincSNR, injData.SNR, injData.CoincSNR, injFile, \
                   "Coherent SNR", "Coincidence SNR", outdir, fig_tag, \
                   snr_vals=[4,30], conts=[[4,30]], colors=['g-'], \
                   xlims=xlims, ylims=ylims, use_logs=False, verbose=verbose)


# Coherent SNR versus trace SNR: non-zoomed and zoomed
fig_tag_list = generate_raw_zoom_tags(tag, "trace_snr_vs_snr")
xlims_list = [None, [6,30]]
ylims_list = [None, [4,30]]
for fig_tag, xlims, ylims in zip(fig_tag_list, xlims_list, ylims_list):
  sbv_plot_handler(trigData.SNR, trigData.TraceSNR, injData.SNR, injData.TraceSNR, injFile, \
                   "Coherent SNR", "Trace SNR", outdir, fig_tag, \
                   snr_vals=[6,30], conts=[[6,27.5]], colors=['g-'], \
                   xlims=xlims, ylims=ylims, use_logs=False, verbose=verbose)


# Plot coincident SNR versus trace SNR: non-zoomed and zoomed
fig_tag_list = generate_raw_zoom_tags(tag, "trace_snr_vs_coinc_snr")
xlims_list = [None, [0,30]]
ylims_list = [None, [0,30]]
for fig_tag, xlims, ylims in zip(fig_tag_list, xlims_list, ylims_list):
  sbv_plot_handler(trigData.CoincSNR, trigData.TraceSNR, injData.CoincSNR, injData.TraceSNR, injFile, \
            "Coincidence SNR", "Trace SNR", outdir, fig_tag, \
            use_logs=False, xlims=xlims, ylims=ylims, verbose=verbose)
 

# Plot coherent SNR versus bank veto
fig_tag_list = generate_raw_zoom_tags(tag, "bank_veto_vs_snr")
xlims_list = [[6,1000], [6,50]]
ylims_list = [None, [1,2000]]
for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  
  sbv_plot_handler(trigData.SNR, trigData.BankVeto, injData.SNR, injData.BankVeto, injFile, \
            "Coherent SNR", "Bank Veto", outdir, fig_tag, \
            snr_vals=snr_vals, conts=bank_conts, \
            shade_cont_value=cont_value, colors=colors, vert_spike=True, \
            xlims=xlims, ylims=ylims, verbose=verbose)
 

# Plot coherent SNR versus auto veto
fig_tag_list = generate_raw_zoom_tags(tag, "auto_veto_vs_snr")
xlims_list = [None, [6,30]]
ylims_list = [None, [10,20000]]
for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
 
  sbv_plot_handler(trigData.SNR, trigData.AutoVeto, injData.SNR, injData.AutoVeto, injFile, \
            "Coherent SNR", "Auto Veto", outdir, fig_tag, \
            snr_vals=snr_vals, conts=auto_conts, \
            shade_cont_value=cont_value,xlims=xlims, ylims=ylims, colors=colors, vert_spike=True, \
            verbose=verbose)


# Plot coherent SNR versus chisq veto
fig_tag_list = generate_raw_zoom_tags(tag, "chisq_vs_snr")
xlims_list = [[6,1000], [0,50]]
ylims_list = [[1,10000], [1,2000]]
for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
 
  sbv_plot_handler(trigData.SNR[trigData.ReweightedSNR!=0], \
            trigData.ChiSquare[trigData.ReweightedSNR!=0], \
            injData.SNR[injData.ReweightedSNR!=0],
            injData.ChiSquare[injData.ReweightedSNR!=0], injFile, \
            "Coherent SNR", "Chi Square", outdir, fig_tag, \
            snr_vals=snr_vals, conts=chi_conts, vert_spike=True, \
            shade_cont_value=cont_value, colors=colors, \
            xlims=xlims, ylims=ylims, \
            verbose=verbose)


# Plot coherent SNR versus loudest single SNR
fig_tag_list = generate_raw_zoom_tags(tag, "first_snr_vs_snr")
xlims_list = [None, [6,50]]
ylims_list = [None, [0,20]]
for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
 
  sbv_plot_handler(trigData.SNR, trigData.FirstSNR, injData.SNR, injData.FirstSNR, injFile, \
            "Coherent SNR", "First loudest sngl SNR", outdir, fig_tag, \
            snr_vals=[0,50], conts=[[4,4]], use_logs=False, \
            colors=['g-'],xlims=xlims, ylims=ylims, verbose=verbose)


# Plot coherent SNR versus second loudest single SNR 
if(len(ifos)>1): 
  fig_tag_list = generate_raw_zoom_tags(tag, "second_snr_vs_snr")
  xlims_list = [None, [6,50]]
  ylims_list = [None, [0,20]]
  for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
 

    sbv_plot_handler(trigData.SNR, trigData.SecondSNR, injData.SNR, injData.SecondSNR, injFile, \
              "Coherent SNR", "Second loudest sngl SNR", outdir, fig_tag, \
              snr_vals=[6, 10, 50], conts=[[2.5, 3.5, 13.5]], use_logs=False, \
              colors=['g-'],xlims=xlims, ylims=ylims, verbose=verbose)


# Plot coherent SNR versus third loudest single SNR
if len(ifos)>2: 
  fig_tag_list = generate_raw_zoom_tags(tag, "third_snr_vs_snr")
  xlims_list = [None, [6,50]]
  ylims_list = [None, [0,20]]
  for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
 
    sbv_plot_handler(trigData.SNR, trigData.ThirdSNR, injData.SNR, injData.ThirdSNR, injFile, \
              "Coherent SNR", "Third loudest sngl SNR", outdir, fig_tag, \
              snr_vals=[0, 50], conts=[[4, 4]], use_logs=False, \
              colors=['g-'],xlims=xlims, ylims=ylims, verbose=verbose)


# TODO: plot SNR versus IFO SNR
sens1 = None
sens2 = None
for ifo in ifos:
  if not sens1:
    sens1 = ifo
  elif not sens2:
    senstvty = trigData.fResp[ifo]*trigData.SigmaMean[ifo]
    if (trigData.fResp[ifo]*trigData.SigmaMean[ifo] > trigData.fResp[sens1]*trigData.SigmaMean[sens1]):
      sens2 = sens1
      sens1 = ifo
    else:
      sens2 = ifo
  else:
    if (trigData.fResp[ifo]*trigData.SigmaMean[ifo] > trigData.fResp[sens1]*trigData.SigmaMean[sens1]):
      sens2 = sens1
      sens1 = ifo
    elif (trigData.fResp[ifo]*trigData.SigmaMean[ifo] > trigData.fResp[sens2]*trigData.SigmaMean[sens2]):
      sens2 = ifo

maxSNR = trigData.SNR.max()
if injFile and injData.SNR.size and injData.SNR.max() > maxSNR:
  maxSNR = injData.SNR.max()
zoomSNR = numpy.arange(0.01,maxSNR,0.01)

for ifo in ifos:

  fig = plt.figure()
  ax  = fig.gca()
  ax.plot(trigData.SNR, trigData.IfoSNR[ifo], 'bx')
  ax.grid()
  if injFile:
    ax.plot(injData.SNR, injData.IfoSNR[ifo], 'r+')
  ax.plot(zoomSNR, ((trigData.fResp[ifo]*trigData.SigmaMean[ifo])**0.5) * zoomSNR, 'g-')
  ax.plot(zoomSNR, ((trigData.fResp[ifo]*trigData.SigmaMin[ifo])**0.5) * zoomSNR, 'g-')
  ax.plot(zoomSNR, ((trigData.fResp[ifo]*trigData.SigmaMax[ifo])**0.5) * zoomSNR, 'g-')
  ax.plot(zoomSNR, scipy.stats.ncx2.ppf(0.0455/2., 2,\
                                          (trigData.fResp[ifo]*trigData.SigmaMin[ifo])*\
                                           zoomSNR**2)**0.5, 'm-')
  ax.plot(zoomSNR, scipy.stats.ncx2.ppf(1-0.0455/2., 2,\
                                          (trigData.fResp[ifo]*trigData.SigmaMax[ifo])*\
                                           zoomSNR**2)**0.5, 'm-')
  ax.plot(zoomSNR, scipy.stats.ncx2.ppf(0.00135/2., 2,\
                                          (trigData.fResp[ifo]*trigData.SigmaMin[ifo])*\
                                           zoomSNR**2)**0.5, 'c-')
  ax.plot(zoomSNR, scipy.stats.ncx2.ppf(1-0.00135/2., 2,\
                                          (trigData.fResp[ifo]*trigData.SigmaMax[ifo])*\
                                           zoomSNR**2)**0.5, 'c-')
  ax.plot([0,50], [4,4], 'k-')
  if (ifo == sens1) or (ifo == sens2):
    # Shade vetoed area
    limy = ax.get_ylim()[0]
    polyx = [0,50]
    polyy = [4,4]
    polyx.extend([50,0])
    polyy.extend([limy, limy])
    ax.fill(polyx, polyy, color = '#dddddd')

  ax.set_xlabel("Coherent SNR")
  ax.set_ylabel("%s sngl SNR" % ifo)
  fig.savefig("%s/%s_%s_snr_vs_snr.png" % (outdir, tag, ifo),\
               bbox_inches='tight')
  
  ax.set_xlim([6,50])
  ax.set_ylim([0,20])
  fig.savefig("%s/%s_%s_snr_vs_snr_zoom.png" % (outdir, tag, ifo),\
               bbox_inches='tight')
  plt.close()
  

# Plot single detector chi-square plots: non-zoomed and zoomed 
for ifo in ifos:
  # Bank chi-square
  if trigData.sngl_bank_chisq:
    fig_tag_list = generate_raw_zoom_tags(tag, "snr_vs_" + ifo + "_bankchisq")
    xlims_list = [[4,1000], [4,50]]
    ylims_list = [None, [1,2000]]
    for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
 
      sbv_plot_handler(trigData.SNR, trigData.IfobankCS[ifo], injData.SNR, injData.IfobankCS[ifo], injFile, \
                "Coherent SNR", "%s sngl bank veto" % ifo, outdir, fig_tag, \
                xlims=xlims, ylims=ylims, verbose=verbose)
    
    fig_tag_list = generate_raw_zoom_tags(tag, ifo + "_snr_vs_" + ifo + "_bankchisq")
    xlims_list = [[4,1000], [4,50]]
    ylims_list = [None, [1,2000]]
    for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  
      sbv_plot_handler(trigData.IfoSNR[ifo], trigData.IfobankCS[ifo], \
                injData.IfoSNR[ifo], injData.IfobankCS[ifo], injFile, \
                "%s SNR" % ifo, "%s sngl bank veto" % ifo, outdir, fig_tag, \
                xlims=xlims, ylims=ylims, verbose=verbose)
  # Auto chi-square
  if trigData.sngl_cont_chisq:
    fig_tag_list = generate_raw_zoom_tags(tag, "snr_vs_" + ifo + "_autochisq")
    xlims_list = [[4,1000], [4,50]]
    ylims_list = [None, [1,2000]]
    for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  
      sbv_plot_handler(trigData.SNR, trigData.IfoautoCS[ifo], injData.SNR, injData.IfoautoCS[ifo], injFile, \
                "Coherent SNR", "%s sngl auto veto" % ifo, outdir, fig_tag, \
                xlims=xlims, ylims=ylims, verbose=verbose)
    
    fig_tag_list = generate_raw_zoom_tags(tag, ifo + "_snr_vs_" + ifo + "_autochisq")
    xlims_list = [[4,1000], [4,50]]
    ylims_list = [None, [1,2000]]
    for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  
      sbv_plot_handler(trigData.IfoSNR[ifo], trigData.IfoautoCS[ifo], \
                injData.IfoSNR[ifo], injData.IfoautoCS[ifo], injFile, \
                "%s SNR" % ifo, "%s sngl auto veto" % ifo, outdir, fig_tag, \
                xlims=xlims, ylims=ylims, verbose=verbose)
  # Standard chi-square
  if trigData.sngl_chisq:
    try:
      fig_tag_list = generate_raw_zoom_tags(tag, "snr_vs_" + ifo + "_chisq")
      xlims_list = [[4,1000], [4,50]]
      ylims_list = [None, [1,2000]]
      for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  
        sbv_plot_handler(trigData.SNR, trigData.IfostanCS[ifo], injData.SNR, injData.IfostanCS[ifo], injFile, \
                  "Coherent SNR", "%s sngl chi squared veto" % ifo, outdir, fig_tag, \
                  xlims=xlims, ylims=ylims, verbose=verbose)

    except OverflowError:
      sys.stderr.write("WARNING: Sngl chisq versus snr "+\
                       "failed with zeros in a loglog plot\n")
    try:
      fig_tag_list = generate_raw_zoom_tags(tag, ifo + "_snr_vs_" + ifo + "_chisq")
      xlims_list = [[4,1000], [4,50]]
      ylims_list = [None, [1,2000]]
      for fig_tag, xlims, ylims in \
             zip(fig_tag_list, xlims_list, ylims_list):
  
        sbv_plot_handler(trigData.IfoSNR[ifo], trigData.IfostanCS[ifo], \
                  injData.IfoSNR[ifo], injData.IfostanCS[ifo], injFile, \
                  "%s SNR" % ifo, "%s sngl chi squared veto" % ifo, outdir, fig_tag, \
                  xlims=xlims, ylims=ylims, verbose=verbose)
      
    except OverflowError:
      sys.stderr.write("WARNING: Sngl chisq versus sngl snr"+\
                       "failed with zeros in a loglog plot\n")


# Plot SNR versus SNR-traceSNR: con-zoomed and zoomed
fig_tag_list = generate_raw_zoom_tags(tag, "trace_diff_vs_snr") #Why was it named the same as the one above? 
xlims_list = [None, [6,20]]
ylims_list = [None, [-5,10]]
inj_y=None
if injFile:
  inj_y = injData.SNR - injData.TraceSNR

for fig_tag, xlims, ylims in \
         zip(fig_tag_list, xlims_list, ylims_list):
  
  sbv_plot_handler(trigData.SNR, trigData.SNR - trigData.TraceSNR, injData.SNR, inj_y, injFile, "Coherent SNR", "SNR - Trace SNR", \
            outdir, fig_tag, use_logs=False,xlims=xlims, ylims=ylims, verbose=verbose)
  

# Plot time versus null stat
fig_tag = '%s_%s' % (tag, "null_snr_vs_time")
sbv_plot_handler(trigData.Time, trigData.Nullstat, injData.Time, injData.Nullstat , injFile, \
            "Time since %s" % (grbTime), "Null SNR", outdir, fig_tag, \
            xlims=[start,end], use_logs=False, verbose=verbose)


# Plot SNR versus rel amp 1
try:
  fig_tag_list = generate_raw_zoom_tags(tag, "rel_amp1_vs_snr") 
  xlims_list = [None, [6,30]]
  ylims_list = [None, None]
  for fig_tag, xlims, ylims in \
         zip(fig_tag_list, xlims_list, ylims_list):
  

    sbv_plot_handler(trigData.SNR, trigData.RelAmp1, injData.SNR, injData.RelAmp1, injFile, "Coherent SNR", "Relative amplitude 1", \
              outdir, fig_tag,xlims=xlims, ylims=ylims,  verbose=verbose)  

except (OverflowError,ValueError):
  sys.stderr.write("WARNING: Relative amplitude 1 versus coherent SNR "+\
                   "failed.\n")


# Plot SNR versus rel amp 2 TODO: empty!
try:
  fig_tag_list = generate_raw_zoom_tags(tag, "rel_amp2_vs_snr")
  xlims_list = [None, [6,30]]
  ylims_list = [None, None]
  for fig_tag, xlims, ylims in \
         zip(fig_tag_list, xlims_list, ylims_list):
  
    sbv_plot_handler(trigData.SNR, trigData.RelAmp2, injData.SNR, injData.RelAmp2, injFile, "Coherent SNR", "Relative amplitude 2", \
               outdir, fig_tag,xlims=xlims, ylims=ylims,  verbose=verbose)
except (OverflowError,ValueError):
  sys.stderr.write("WARNING: Relative amplitude 2 versus coherent SNR "+\
                   "failed with zeros in a loglog plot\n")


# Plot SNR versus norm 3: TODO empty
try:
  fig_tag_list = generate_raw_zoom_tags(tag, "norm3_vs_snr")
  xlims_list = [None, [6,30]]
  for fig_tag, xlims in zip(fig_tag_list, xlims_list):
    sbv_plot_handler(trigData.SNR, trigData.Norm3, injData.SNR, injData.Norm3, injFile, "Coherent SNR", "Amplitude factor", \
              outdir, fig_tag,xlims=xlims, verbose=True)
except (OverflowError,ValueError):
  sys.stderr.write("WARNING: Amplitude factor versus coherent SNR "+\
                   "failed with zeros in a loglog plot\n")


# Plot SNR versus inclination: TODO: empty
try:
  fig_tag_list = generate_raw_zoom_tags(tag, "inclination_vs_snr")
  xlims_list = [None, [6,30]]
  for fig_tag, xlims in zip(fig_tag_list, xlims_list):
    sbv_plot_handler(trigData.SNR, trigData.Inclination, injData.SNR, injData.Inclination, injFile, "Coherent SNR", "|cos inclination|", \
              outdir, fig_tag, xlims=xlims, verbose=verbose)

except (OverflowError,ValueError):
  sys.stderr.write("WARNING: cos(inclination) versus coherent SNR "+\
                   "failed with zeros in a loglog plot\n")


# TODO: plot sky grid
fig = plt.figure()
ax  = fig.gca()
ax.set_title("coh\_PTF %s Sky Grid" % tag, fontsize=18)
ax.set_xlabel("Longitude (Degrees)", fontsize=16)
ax.set_ylabel("Latitude (Degrees)", fontsize=16)
ax.plot(trigData.Longitude, trigData.Latitude, 'ko', markerfacecolor='blue')
fig.savefig("%s/%s_sky_grid.png" % (outdir, tag))
plt.close()
#sbv_plot_handler(trigData.SNR, trigData.Inclination, injData.SNR, injData.Inclination, injFile, "Longitude (Degrees)", "Latitude (Degrees)", \
#            outdir, fig_tag, verbose=True)


if verbose: sys.stdout.write("Done at %d.\n" % (elapsed_time()))
