#!/usr/bin/env python
#
# Copyright (C) 2019 Gino Contestabile, Francesco Pannarale
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# =============================================================================
# Preamble
# =============================================================================

"""
Plot single IFO/coherent/reweighted/null SNR timeseries for a PyGRB run.
"""

from __future__ import division

import sys
import glob
import os
import logging
import matplotlib.pyplot as plt
import pycbc.version
from pycbc.results.pygrb_postprocessing_utils import extract_ifos_and_vetoes
from pycbc.results.pygrb_postprocessing_utils import load_injections_data
from pycbc.results.pygrb_postprocessing_utils import load_triggers_data
from pycbc.results.pygrb_postprocessing_utils import get_grb_time
from pycbc.results.pygrb_postprocessing_utils import get_start_end_times
from pycbc.results.pygrb_postprocessing_utils import reset_times
from pycbc.results.pygrb_postprocessing_utils import pygrb_initialize_plot_parser
from pycbc.results.pygrb_postprocessing_utils import pygrb_add_bestnr_opts
from pycbc.results.pygrb_plotting_utils import pygrb_plotter
from pycbc.results.pygrb_plotting_utils import pygrb_shared_plot_setups

plt.switch_backend('Agg')

__author__ = "Francesco Pannarale <francesco.pannarale@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__ = pycbc.version.date
__program__ = "pycbc_pygrb_plot_snr_timeseries"


# =============================================================================
# Main script starts here
# =============================================================================
description = 'pycbc_pygrb_plot_snr_timeries produces SNR timeseries plots.'
usage = __program__ + ' [--options]'

parser = pygrb_initialize_plot_parser(usage=usage, description=description, version=__version__)
parser.add_argument("-t", "--trig-file", action="store",
                    default=None, required=True,
                    help="The location of the trigger file")
parser.add_argument('--central-time', type=float, default=None,
                    help="Center plot at the given GPS time. If omitted, "+
                    "use the GRB trigger time")
parser.add_argument("-y", "--y-variable", default=None, help="Quantity " +
                    "to plot on the vertical axis. Supported choices " +
                    "are: coherent, single, reweighted, or null.")
parser = pygrb_add_bestnr_opts(parser)
opts = parser.parse_args()

if opts.verbose:
    level = logging.INFO
else:
    level = logging.WARNING
logging.basicConfig(format="%(asctime)s: %(levelname)s: %(message)s",
                    level=level)

# Check options
trig_file = os.path.abspath(opts.trig_file)
inj_file = None
if opts.inj_file:
    inj_file = os.path.abspath(opts.inj_file)
outfile = opts.output_file
seg_dir = opts.segment_dir
veto_files = []
if opts.veto_directory:
    veto_string = ','.join([str(i) for i in range(2, opts.veto_category+1)])
    veto_files = glob.glob(opts.veto_directory +'/*CAT[%s]*.xml' %(veto_string))
snr_type = opts.y_variable
ifo = opts.ifo
if snr_type == 'single' and ifo is None:
    msg = "Please specify an interferometer for a single IFO plot"
    logging.error(msg)
    sys.exit()

logging.info("Imported and ready to go.")

# Set output directories
outdirs = [os.path.split(os.path.abspath(outfile))[0]]
for outdir in outdirs:
    if not os.path.isdir(outdir):
        os.makedirs(outdir)

# Extract IFOs and vetoes
_, vetoes = extract_ifos_and_vetoes(trig_file, opts.veto_directory, \
                                    opts.veto_category)

# Extract trigger data
trig_data = load_triggers_data(trig_file, vetoes, opts)

# Extract (or initialize) injection data
inj_data = load_injections_data(inj_file, vetoes, opts)

# Determine the central time (t=0): default is the GRB trigger time
if opts.central_time is not None:
    central_time = opts.central_time
else:
    central_time = get_grb_time(seg_dir)

# Determine trigger data start and end times relative to the central time
start, end = get_start_end_times(trig_data, central_time)

# Reset trigger and injection times
trig_data = reset_times(trig_data, central_time)
if inj_file:
    inj_data = reset_times(inj_data, central_time)

# Generate plots
logging.info("Plotting...")

# Determine what goes on the vertical axis
y_labels = {'coherent': "Coherent SNR",
            'single': "%s SNR" % ifo,
            'null': "Null SNR",
            'reweighted': "Reweighted SNR"}
y_label = y_labels[snr_type]
trig_snr_data_dict = {'coherent': trig_data.snr,
                      'null': trig_data.null_stat,
                      'reweighted': trig_data.reweighted_snr}
if ifo:
    trig_snr_data_dict.update({'single': trig_data.ifo_snr[ifo]})
trig_snr_data = trig_snr_data_dict[snr_type]
inj_snr_data = None
if inj_file:
    inj_snr_data_dict = {'coherent': inj_data.snr,
                         'null': inj_data.null_stat,
                         'reweighted': inj_data.reweighted_snr}
    if ifo:
        inj_snr_data_dict.update({'single': inj_data.ifo_snr[ifo]})
    inj_snr_data = inj_snr_data_dict[snr_type]

# Determine title and caption
if opts.plot_title is None:
    opts.plot_title = y_label + " vs Time"
if opts.plot_caption is None:
    opts.plot_caption = ("Blue crosses: background triggers.  ")
    if inj_file:
        opts.plot_caption += ("Red crosses: injections triggers.")

# Single IFO SNR versus time plots
pygrb_shared_plot_setups()
xlims = [start, end]
if opts.x_lims:
    xlims = opts.x_lims
    xlims = map(float, xlims.split(','))
pygrb_plotter(trig_data.time, trig_snr_data,
              inj_data.time, inj_snr_data, inj_file,
              "Time since %.3f (s)" % (central_time), y_label, outfile,
              xlims=xlims, use_logs=False, cmd=' '.join(sys.argv),
              plot_title=opts.plot_title, plot_caption=opts.plot_caption)
