#!/usr/bin/env python
#
# Copyright (C) 2019 Gino Contestabile, Francesco Pannarale
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# =============================================================================
# Preamble
# =============================================================================

from __future__ import division

import sys
import glob
import os
import copy
import logging
from glue.ligolw import lsctables
import pycbc.version
from matplotlib import rc
from pycbc.results.pygrb_postprocessing_utils import *
plt.switch_backend('Agg')

__author__  = "Francesco Pannarale <francesco.pannarale@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__ = pycbc.version.date
__program__ = "pycbc_pygrb_plot_null_stats"


# =============================================================================
# Main script starts here
# =============================================================================

description = 'Plots null statistics or coincident SNR vs coherent SNR.'
usage = __program__ + ' [--options]'
opts = pygrb_plot_opts_parser(usage=usage, description=description, version=__version__)

if opts.verbose:
    level = logging.INFO
else:
    level = logging.WARNING
logging.basicConfig(format="%(asctime)s:%(levelname)s : %(message)s",
                    level=level)

trig_file = os.path.abspath(opts.trig_file)
inj_file = None
if opts.inj_file:
    inj_file = os.path.abspath(opts.inj_file)
outfile = opts.output_file
zoomedoutfile = opts.zoomed_output_file
if zoomedoutfile is None:
    msg = "Please specify a pathname with the zoomed-ouptut-file option"
    logging.error(msg)
    sys.exit()
veto_files = []
if opts.veto_directory:
    veto_string = ','.join([str(i) for i in range(2,opts.veto_category+1)])
    veto_files = glob.glob(opts.veto_directory +'/*CAT[%s]*.xml' %(veto_string))

# Check that the y-axis variable was specified
null_stat_type = opts.y_variable
if null_stat_type is None:
    msg = "Please specify the null statistic to be plotted"
    logging.error(msg)
    sys.exit()
# Prepare plot title and caption
y_labels = {'nullstat': "Null statistic",
            'overwhitened': "Overwhitened null statistic",
            'coincident': "Coincident SNR"}
if opts.plot_title is None:
    opts.plot_title = y_labels[null_stat_type] + " vs Coherent SNR"
if opts.plot_caption is None:
    opts.plot_caption = ("Blue crosses: Background triggers\n" +
                         "Red crosses: Injections triggers\n")

    if null_stat_type == 'coincident':
        opts.plot_caption = (opts.plot_caption +
                             "Green line: coincident SNR = coherent SNR")
    else:
        opts.plot_caption = (opts.plot_caption +
                             "Black line: Veto line\n" +
                             "Green line: Above this triggers have reduced " +
                             "detection statistic\n" +
                             "Magenta line: On this line the statistic is " +
                             "reduced by a factor of two")

logging.info("Imported and ready to go.")

# Set output directories
outdirs = [os.path.split(os.path.abspath(outfile))[0], \
           os.path.split(os.path.abspath(zoomedoutfile))[0]]
for outdir in outdirs:
    if not os.path.isdir(outdir):
        os.makedirs(outdir)

# Extract IFOs and vetoes
ifos = extract_ifos(trig_file)

# Extract IFOs and vetoes
vetoes = extract_vetoes(trig_file, ifos)

# Load triggers
trigs = load_triggers(trig_file, vetoes, ifos)

# Extract trigger data
trig_data = PygrbFilterOutput(trigs, ifos,
                              lsctables.MultiInspiralTable.loadcolumns,
                              "triggers", opts)

# Load injections
injs = None
if inj_file:
    injs = load_injections(inj_file, vetoes)

# Extract injection data
inj_data = PygrbFilterOutput(injs, ifos,
                             lsctables.MultiInspiralTable.loadcolumns,
                             "injections", opts)

# Generate plots
logging.info("Plotting...")

# Contours
snr_vals = None
cont_colors = None
null_stat_conts_list = None
shade_cont_value = None
x_max = None 
# Coincident SNR plot case: we want a coinc=coh diagonal line on the plot
if null_stat_type == 'coincident':
    cont_colors = ['g-']
    x_max = axis_max_value(trig_data.snr, inj_data.snr, inj_file)
    snr_vals = [4, x_max]
    conts = [[4, x_max]]
    null_stat_conts_list = [conts, conts] 
# Overwhitened null stat (null SNR) and null stat  cases: newSNR contours
else:
    cont_colors = ['k-', 'g-', 'm-']
    _, _, _, null_cont, snr_vals, _, _ = \
        calculate_contours(trigs, opts)
    null_stat_conts_1 = [null_cont]
    null_stat_conts_2 = [null_cont]
    null_thresh = map(float, opts.null_snr_threshold.split(','))
    null_thresh_width = null_thresh[1] - null_thresh[0]
    null_stat_conts_2.append(numpy.asarray(null_cont) - null_thresh_width)
    if null_thresh_width > 1:
        null_stat_conts_2.append(numpy.asarray(null_cont) - null_thresh_width + 1)
    null_stat_conts_list = [null_stat_conts_1, null_stat_conts_2]
    shade_cont_value = 0

# Overwhitened null stat (null SNR), null stat or coincident SNR vs
# Coherent SNR plots: non-zoomed and zoomed
fig_path_list = [outfile, zoomedoutfile]
xlims_list = [None, [6,30]]
ylims_list = [None, [0,30]]
# Get rcParams
rc('font', size=14)
# Set color for out-of-range values
plt.cm.spring.set_over('g')
# Determine y-axis values of triggers and injections
y_label = y_labels[null_stat_type]
trig_null_data_dict = {'nullstat': trig_data.null_stat,
                       'overwhitened': trig_data.null_snr,
                       'coincident': trig_data.coinc_snr}
trig_null_stat_data = trig_null_data_dict[null_stat_type]
inj_null_stat_data = None
if inj_file:
    inj_null_data_dict = {'nullstat': inj_data.null_stat,
                          'overwhitened': inj_data.null_snr,
                          'coincident': inj_data.coinc_snr}
    inj_null_stat_data = inj_null_data_dict[null_stat_type]

for fig_path, null_stat_conts, xlims, ylims in zip(fig_path_list,
                                 null_stat_conts_list, xlims_list, ylims_list):
    pygrb_plotter(trig_data.snr, trig_null_stat_data,
                  inj_data.snr, inj_null_stat_data, inj_file,
                  "Coherent SNR", y_label, fig_path,
                  snr_vals=snr_vals, conts=null_stat_conts,
                  shade_cont_value=shade_cont_value, colors=cont_colors,
                  xlims=xlims, ylims=ylims, use_logs=False,
                  cmd=' '.join(sys.argv),
                  plot_title=opts.plot_title, plot_caption=opts.plot_caption)
