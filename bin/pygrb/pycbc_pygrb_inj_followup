#!/usr/bin/env python

# Copyright (C) 2021 Francesco Pannarale & Michael Patel
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# =============================================================================
# Preamble
# =============================================================================

"""
Gather information on the n-th loudest trigger or quiet/missed injection.
"""

from __future__ import division

import sys
import os
import logging
import numpy as np
import argparse
import h5py
import pycbc.version
import pycbc.results

__author__ = "Francesco Pannarale <francesco.pannarale@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__ = pycbc.version.date
__program__ = "pycbc_pygrb_inj_followup"


# =============================================================================
# Main script starts here
# =============================================================================
description = 'Gather information on the n-th loudest trigger or quiet/missed injection.'
usage = __program__ + ' [--options]'
opts = pygrb_plot_opts_parser(usage=usage, description=description, version=__version__)

parser = argparse.ArgumentParser(usage=usage, description=description,
             formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("--version", action="version", version=version)

parser.add_argument("-v", "--verbose", default=False, action="store_true",
                    help="verbose output")

parser.add_argument("-i", "--input-file", action="store",
                    default=None, #required=True,
                    help="The location of the h5 input file")

parser.add_argument("--followup-idx", action="store", type=int,
                    default=None, help="Index of trigger/injection " +
                    "to followup from the input-file.")

opts = parser.parse_args()

if opts.verbose:
    level = logging.INFO
else:
    level = logging.WARNING
logging.basicConfig(format="%(asctime)s: %(levelname)s: %(message)s",
                    level=level)

# Check options
if opts.input_file is None:
    err_msg = "Must specify an input file."
    logging.error(err_msg)
    sys.exit()
if opts.followup_idx is None:
    err_msg = "Must specify index of injection/trigger to select "
    err_msg += "from the input file."
    logging.error(err_msg)
    sys.exit()

msg = "Will determine entry "+str(followup_idx)
logging.info(msg)

# Set output directory
logging.info("Setting output directory.")
outdir = os.path.split(os.path.abspath(output_file))[0]

# Create output directory if it does not exist
if not os.path.isdir(outdir):
    os.makedirs(outdir)

input_fp = h5py.File(input_file, 'r')
print(input_fp.keys())
print(input_fp[])

# There has to be a cleaner way to do this?
cols = ['geocent_end_time', 'geocent_end_time_ns', 'mass1', 'mass2',
        'mchirp', 'f_lower', 'inclination', 'spin1x', 'spin1y', 'spin1z',
        'spin2x', 'spin2y', 'spin2z', 'longitude', 'latitude', 'distance',
        'eff_dist_h', 'eff_dist_l', 'eff_dist_v']

lsctables.SimInspiralTable.loadcolumns = cols

output_inj_table = lsctables.New(lsctables.SimInspiralTable,
                                 columns=lsctables.SimInspiralTable.loadcolumns)
output_inj_table.append(missed_inj_table[followup_idx])

# Write the Nth injection to file
#xmldoc = ligolw.Document()
#xmldoc.appendChild(ligolw.LIGO_LW())
#xmldoc.childNodes[-1].appendChild(output_inj_table)
#utils.write_filename(xmldoc, output_file)
logging.info("Injection/trigger information gathered and saved.")
