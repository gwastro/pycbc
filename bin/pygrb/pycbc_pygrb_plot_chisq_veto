#!/usr/bin/env python
#
# Copyright (C) 2019 Gino Contestabile, Francesco Pannarale
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# =============================================================================
# Preamble
# =============================================================================

"""
Plot standard/bank/auto chi-square vs coherent SNR for a PyGRB run.
"""

from __future__ import division

import sys
import glob
import os
import logging
import numpy
from matplotlib import pyplot as plt
import pycbc.version
from pycbc.results.pygrb_postprocessing_utils import extract_ifos_and_vetoes
from pycbc.results.pygrb_postprocessing_utils import format_single_chisqs
from pycbc.results.pygrb_postprocessing_utils import get_bestnrs
from pycbc.results.pygrb_postprocessing_utils import load_triggers
from pycbc.results.pygrb_postprocessing_utils import load_injections
from pycbc.results.pygrb_postprocessing_utils import pygrb_add_bestnr_opts
from pycbc.results.pygrb_postprocessing_utils import pygrb_initialize_plot_parser
from pycbc.results.pygrb_plotting_utils import axis_max_value
from pycbc.results.pygrb_plotting_utils import calculate_contours
from pycbc.results.pygrb_plotting_utils import pygrb_plotter
from pycbc.results.pygrb_plotting_utils import pygrb_shared_plot_setups

plt.switch_backend('Agg')

__author__ = "Francesco Pannarale <francesco.pannarale@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__ = pycbc.version.date
__program__ = "pycbc_pygrb_plot_chisq_veto"


# Function to load necessary SNR and chi-squared data from a trigger/injection file
def load_data(input_file, vetoes, ifos, opts, injections=False, sim_table=False):
    """Build a dictionary containing SNR and chi-squared data extracted from a
    trigger/injection file"""

    # Keys of the quantities to be extracted
    snr_type = 'snr'
    if opts.use_sngl_ifo_snr:
        snr_type += '_sngl'
    veto_type = opts.y_variable
    if opts.use_sngl_ifo_veto:
        veto_type += '_sngl'

    # Inizialize the dictionary
    data = {}
    data[snr_type] = numpy.array(None)
    data[veto_type] = None

    # Fill the dictionary in with required data
    if input_file:
        if not injections:
            trigs_or_injs = load_triggers(input_file, vetoes)
        else:
            trigs_or_injs = load_injections(input_file, vetoes,
                                            sim_table=sim_table)
        # Case with single SNR
        if snr_type == 'snr_sngl':
            data[snr_type] = trigs_or_injs.get_sngl_snr(opts.ifo)
        # Coherent SNR
        else:
            data[snr_type] = numpy.asarray(trigs_or_injs.get_column('snr'))
        # Chi-squared data
        prefix_dict = {'standard': '', 'bank': 'bank_', 'auto': 'cont_'}
        if '_sngl' not in veto_type:
            data[veto_type] = \
                numpy.asarray(trigs_or_injs.get_column(prefix_dict[veto_type]+'chisq'))
        elif veto_type == 'standard_sngl':
            data[veto_type] = trigs_or_injs.get_sngl_chisqs(ifos)
        # Format single IFO chi-squared data (keep only data of interest)
        if opts.use_sngl_ifo_veto:
            data[veto_type] = format_single_chisqs(data[veto_type], ifos)[opts.ifo]
        # Remove BestNR = 0 points when dealing with standard chi-square
        if 'standard' in veto_type:
            null_thresh = map(float, opts.null_snr_threshold.split(','))
            data['reweighted_snr'] = get_bestnrs(trigs_or_injs,
                                                 q=opts.chisq_index,
                                                 n=opts.chisq_nhigh,
                                                 null_thresh=null_thresh,
                                                 snr_threshold=opts.snr_threshold,
                                                 sngl_snr_threshold=opts.sngl_snr_threshold,
                                                 chisq_threshold=opts.newsnr_threshold,
                                                 null_grad_thresh=opts.null_grad_thresh,
                                                 null_grad_val=opts.null_grad_val)
            data[snr_type] = data[snr_type][data['reweighted_snr'] != 0]
            data[veto_type] = data[veto_type][data['reweighted_snr'] != 0]
        # Gather data on degrees of freedom
        for cs in ['', 'bank_', 'cont_']:
            dof = cs+'chisq_dof'
            data[dof] = numpy.unique(trigs_or_injs.get_column(dof))

    return data


# =============================================================================
# Main script starts here
# =============================================================================
description = 'Produces signal consistency plots of the form SNR versus veto.'
usage = __program__ + ' [--options]'

parser = pygrb_initialize_plot_parser(usage=usage, description=description,
                                      version=__version__)
parser.add_argument("-t", "--trig-file", action="store",
                    default=None, required=True,
                    help="The location of the trigger file")
# TODO: don't loop on the output files in the executables?
parser.add_argument("-O", "--zoomed-output-file", default=None,
                    required=True, help="Output file for a zoomed in " +
                    "version of the plot.")
parser.add_argument("-y", "--y-variable", required=True, help="Quantity " +
                    "to plot on the vertical axis. Supported choices " +
                    "are: standard, bank, or auto.")
parser.add_argument("--use-sngl-ifo-snr", default=False,
                    action="store_true", help="Plots are vs single IFO " +
                    "SNR, rather than coherent SNR")
parser.add_argument("--use-sngl-ifo-veto", default=False,
                    action="store_true", help="Single IFO veto values " +
                    "plotted, rather than network ones")
parser = pygrb_add_bestnr_opts(parser)
opts = parser.parse_args()

if opts.verbose:
    level = logging.INFO
else:
    level = logging.WARNING
logging.basicConfig(format="%(asctime)s:%(levelname)s : %(message)s",
                    level=level)

# Check options
trig_file = os.path.abspath(opts.trig_file)
inj_file = None
if opts.inj_file:
    inj_file = os.path.abspath(opts.inj_file)
outfile = opts.output_file
zoomedoutfile = opts.zoomed_output_file
veto_files = []
if opts.veto_directory:
    veto_string = ','.join([str(i) for i in range(2, opts.veto_category+1)])
    veto_files = glob.glob(opts.veto_directory +'/*CAT[%s]*.xml' %(veto_string))
# Check that the y-axis variable was specified correctly
if opts.y_variable in ['standard', 'bank', 'auto']:
    veto_type = opts.y_variable
else:
    logging.error('Unrecognized option given with --y-variable')
    sys.exit()
veto_type = opts.y_variable
ifo = opts.ifo
snr_type = 'snr'
# If this is false, coherent SNR is used on the horizontal axis
# otherwise the single IFO SNR is used
use_sngl_ifo_snr = opts.use_sngl_ifo_snr
if use_sngl_ifo_snr:
    if ifo is None:
        logging.error("--ifo must be given when using --use-sngl-ifo-snr")
        sys.exit()
    else:
        snr_type += '_sngl'
# If this is false, network vetoes are used on the vertical axis
# otherwise the veto is intended as a single IFO quantity
use_sngl_ifo_veto = opts.use_sngl_ifo_veto
if use_sngl_ifo_veto:
    if ifo is None:
        logging.error("--ifo must be given when using --use-sngl-ifo-veto")
        sys.exit()
    elif veto_type != 'standard':
        logging.error("Single IFO values are available only for the standard chi-square")
        sys.exit()
    else:
        veto_type += '_sngl'

# Prepare plot title and caption
veto_labels = {'standard': "Chi Square Veto",
               'bank': "Bank Veto",
               'auto': "Auto Veto"}
if opts.plot_title is None:
    opts.plot_title = veto_labels[veto_type.replace('_sngl', '')]
    if use_sngl_ifo_veto:
        opts.plot_title = "%s %s" %(ifo, opts.plot_title)
    if use_sngl_ifo_snr:
        opts.plot_title += " vs %s SNR" %(ifo)
    else:
        opts.plot_title += " vs Coherent SNR"
if opts.plot_caption is None:
    opts.plot_caption = ("Blue crosses: background triggers.  " +
                         "Black line: veto line.  " +
                         "Gray shaded region: Vetoed area.  " +
                         "Yellow lines: contours of new SNR.")
    if inj_file:
        opts.plot_caption = ("Red crosses: injection triggers.  ") +\
                            opts.plot_caption

logging.info("Imported and ready to go.")

# Set output directories
outdirs = [os.path.split(os.path.abspath(outfile))[0], \
           os.path.split(os.path.abspath(zoomedoutfile))[0]]
for outdir in outdirs:
    if not os.path.isdir(outdir):
        os.makedirs(outdir)

# Extract IFOs and vetoes
ifos, vetoes = extract_ifos_and_vetoes(trig_file, opts.veto_directory, \
                                       opts.veto_category)

# Exit gracefully if the requested IFO is not available
if ifo and ifo not in ifos:
    logging.error("The IFO selected with --ifo is unavailable in the data.")
    sys.exit()

# Extract trigger data
trig_data = load_data(trig_file, vetoes, ifos, opts)

# Extract (or initialize) injection data
inj_data = load_data(inj_file, vetoes, ifos, opts, injections=True,
                     sim_table=False)

# Sanity checks
if trig_data[snr_type] is None and inj_data[snr_type] is None:
    logging.warn("No data to be plotted on the x-axis was found")
    sys.exit()
if trig_data[veto_type] is None and inj_data[veto_type] is None:
    logging.warn("No data to be plotted on the y-axis was found")
    sys.exit()

# Generate plots
logging.info("Plotting...")

# Determine x-axis values of triggers and injections
# Default is coherent SNR
x_label = "Coherent SNR"
# Case with single SNR
if use_sngl_ifo_snr:
    x_label = "%s SNR" % ifo

# Determine the minumum and maximum SNR value we are dealing with
x_min = opts.sngl_snr_threshold
x_max = 1.1*axis_max_value(trig_data[snr_type], inj_data[snr_type], inj_file)

# Determine y-axis minimum value and label
y_label = veto_labels[veto_type.replace('_sngl', '')]
y_min = 1
if opts.use_sngl_ifo_veto:
    y_label = "%s Single %s" % (ifo, y_label)
    y_min = 0.001

# Determine the maximum bank veto value we are dealing with
y_max = axis_max_value(trig_data[veto_type], inj_data[veto_type], inj_file)

# Determine contours for plots
bank_conts, auto_conts, chi_conts, _, snr_vals, cont_value, colors = \
    calculate_contours(trig_data, opts)
cont_dict = {'standard': chi_conts,
             'bank': bank_conts,
             'auto': auto_conts}
# Use contours and shading only when network vetoes are involved
if not opts.use_sngl_ifo_veto:
    conts = cont_dict[veto_type]
else:
    conts = None
    cont_value = None

# Produce a non-zoomed and a zoomed veto vs. SNR plot
fig_path_list = [outfile, zoomedoutfile]
xlims_list = [[x_min, 50], [x_min, x_max]]
ylims_list = [[y_min, 20000], [y_min, 10*y_max]]
pygrb_shared_plot_setups()
for fig_path, xlims, ylims in zip(fig_path_list, xlims_list, ylims_list):
    pygrb_plotter(trig_data[snr_type], trig_data[veto_type],
                  inj_data[snr_type], inj_data[veto_type],
                  inj_file, x_label, y_label, fig_path,
                  snr_vals=snr_vals, conts=conts, colors=colors,
                  shade_cont_value=cont_value, vert_spike=True,
                  xlims=xlims, ylims=ylims, cmd=' '.join(sys.argv),
                  plot_title=opts.plot_title, plot_caption=opts.plot_caption)
