#! /usr/bin/env python
"""                                                                                                                          
Program for adding mass ratio, total mass, chirpmass and spin magnitudes columns
to the results output file of the faithsim workflow.      
"""

import numpy as np
from ligo.lw import utils, table, lsctables
from pycbc.io.ligolw import LIGOLWContentHandler
from pycbc import pnutils
import argparse

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument(
    "--input-collect-results",
    required=True,
    help="resulting .dat file from pycbc_faithsim_collect_results",
)
parser.add_argument("--output", required=True, help="name of the output .dat file")

args = parser.parse_args()

bfields = (
    "match",
    "overlap",
    "time_offset",
    "sigma1",
    "sigma2",
    "mass1",
    "mass2",
    "spin1x",
    "spin1y",
    "spin1z",
    "spin2x",
    "spin2y",
    "spin2z",
    "inclination",
    "latitude",
    "longitude",
    "polarization",
    "coa_phase",
)

dtypeo = {
    "names": bfields,
    "formats": (
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
    ),
}

cfields = (
    "match",
    "overlap",
    "time_offset",
    "sigma1",
    "sigma2",
    "mass1",
    "mass2",
    "spin1x",
    "spin1y",
    "spin1z",
    "spin2x",
    "spin2y",
    "spin2z",
    "inclination",
    "latitude",
    "longitude",
    "polarization",
    "coa_phase",
    "mass_ratio",
    "mchirp",
    "total_mass",
    "spin1_magnitude",
    "spin2_magnitude",
)

dtypec = {
    "names": cfields,
    "formats": (
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
        "f8",
    ),
}

columns = "match overlap time_offset sigma1 sigma2 mass1 mass2 spin1x spin1y spin1z spin2x spin2y spin2z inclination latitude longitude polarization coa_phase mass_ratio mchirp total_mass spin1_magnitude spin2_magnitude"

data = np.loadtxt(args.input_collect_results, dtype=dtypeo)

mmass1 = np.maximum(data["mass1"], data["mass2"])
mmass2 = np.minimum(data["mass1"], data["mass2"])
mchirp, eta = pnutils.mass1_mass2_to_mchirp_eta(mmass1, mmass2)
M = data["mass1"] + data["mass2"]
q = np.maximum(data["mass1"] / data["mass2"], data["mass2"] / data["mass1"])
s1 = (data["spin1x"] ** 2 + data["spin1y"] ** 2 + data["spin1z"] ** 2) ** 0.5
s2 = (data["spin2x"] ** 2 + data["spin2y"] ** 2 + data["spin2z"] ** 2) ** 0.5

d = np.zeros(0, dtype=dtypec)
pdata = np.zeros(len(data), dtype=dtypec)

for field in cfields:
    if field in bfields:
        pdata[field] = data[field]
    else:
        if field == "mass_ratio":
            pdata[field] = np.copy(q)
        if field == "mchirp":
            pdata[field] = np.copy(mchirp)
        if field == "total_mass":
            pdata[field] = np.copy(M)
        if field == "spin1_magnitude":
            pdata[field] = np.copy(s1)
        if field == "spin2_magnitude":
            pdata[field] = np.copy(s2)

d = np.append(d, pdata)

np.savetxt(args.output, d, header=columns)
