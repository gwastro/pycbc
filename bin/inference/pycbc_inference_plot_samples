#! /usr/bin/evn python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import matplotlib as mpl; mpl.use("Agg")
import matplotlib.pyplot as plt
import sys
from pycbc import results
from pycbc.io.inference_hdf import InferenceFile

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_inference_plot_samples [--options]",
    description="Plots samples from inference sampler.")

# add data options
parser.add_argument("--input-file", type=str, required=True,
    help="Path to input HDF file.")
parser.add_argument("--variable-args", type=str, nargs="+", default=None,
    help="Name of parameters varied.")

# output plot options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")

# add thinning options
parser.add_argument("--thin-start", type=int, default=None,
    help="Sample number to start collecting samples to plot.")
parser.add_argument("--thin-interval", type=int, default=1,
    help="Interval to use for thinning samples.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="")

# parse the command line
opts = parser.parse_args()

# setup log
if opts.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARN
logging.basicConfig(format="%(asctime)s : %(message)s", level=log_level)

# read input file
logging.info("Reading input file")
fp = InferenceFile(opts.input_file, "r")
variable_args = fp.read_variable_args() if opts.variable_args is None else opts.variable_args

# get number of dimensions
ndim = len(variable_args)

# plot samples
# plot each variable arg has a different subplot
logging.info("Plotting samples")
fig, axs = plt.subplots(ndim, sharex=True)
plt.xlabel("Iteration")

# loop over variable args
axs = [axs] if not hasattr(axs, "__iter__") else axs
for i,arg in enumerate(variable_args):

    # loop over walkers
    for j in range(fp.attrs["nwalkers"]):

        # plot each walker as a different line on the subplot
        axs[i].plot(fp.read_samples_from_walker(arg, j,
                                                thin_start=opts.thin_start,
                                                thin_interval=opts.thin_interval),
                    alpha=0.25)

        # y-axis label
        axs[i].set_ylabel(r'%s'%fp.read_label(arg))

# save figure with meta-data
caption_kwargs = {
    "parameters" : ", ".join([fp.read_label(param, html=True) for param in variable_args]),
}
caption = r"""All samples from all the walker chains for the parameters. Each
line is a different chain of walker samples."""
title = "Samples for {parameters}".format(**caption_kwargs)
results.save_fig_with_metadata(fig, opts.output_file,
                               cmd=" ".join(sys.argv),
                               title=title,
                               caption=caption)
plt.close()

# exit
fp.close()
logging.info("Done")
