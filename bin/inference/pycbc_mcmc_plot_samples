#! /usr/bin/evn python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import matplotlib as mpl; mpl.use("Agg")
import matplotlib.pyplot as plt

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_mcmc_plot_samples [--options]",
    description="Plots samples from MCMC.")

# add data options
parser.add_argument("--input-file", type=str, required=True,
    help="Path to input HDF file.")
parser.add_argument("--variable-args", type=str, nargs="+", required=True,
    help="Name of parameters varied in MCMC.")

# output plot options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")
parser.add_argument("--labels", type=str, nargs="+", required=True,
    help="Label for each parameter.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="")

# parse the command line
opts = parser.parse_args()

# setup log
if opts.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARN
logging.basicConfig(format="%(asctime)s : %(message)s", level=log_level)

# get number of dimensions
ndim = len(opts.variable_args)

# read input file
logging.info("Reading input file")
fp = h5py.File(opts.input_file, "r")

# plot samples
# plot each variable arg has a different subplot
logging.info("Plotting samples")
fig, axs = plt.subplots(ndim, sharex=True)
plt.xlabel("iterations")

# loop over variable args
axs = [axs] if type(axs) is not list else axs
for i,arg in enumerate(opts.variable_args):

    # loop over walkers
    for j in range(fp.attrs["nwalkers"]):

        # plot each walker as a different line on the subplot
        axs[i].plot(fp[arg]["walker%d"%j][:], alpha=0.1)

        # y-axis label
        axs[i].set_ylabel(r"%s"%opts.labels[i])

# save plot
plt.savefig(opts.output_file)
plt.close()

# exit
logging.info("Done")
