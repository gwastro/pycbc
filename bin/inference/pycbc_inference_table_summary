#! /usr/bin/env python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import numpy
import sys
from pycbc import results
from pycbc.io.inference_hdf import InferenceFile

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_inference_table_summary [--options]",
    description="Makes a table of posterior results.")

# add data options
parser.add_argument("--input-file", type=str, required=True,
    help="Path to input HDF file.")
parser.add_argument("--variable-args", type=str, nargs="+", default=[],
    help="Name of parameters varied in sampler.")

# output plot options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")

# add thinning options
parser.add_argument("--thin-start", type=int, default=None,
    help="Sample number to start collecting samples to plot.")
parser.add_argument("--thin-interval", type=int, default=1,
    help="Interval to use for thinning samples.")

# add quantile options
parser.add_argument("--quantiles", type=float, nargs="+",
    default=[0.16,0.50,0.84],
    help="Quantiles to calculate.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="")

# parse the command line
opts = parser.parse_args()

# setup log
if opts.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARN
logging.basicConfig(format="%(asctime)s : %(message)s", level=log_level)

# read input file
logging.info("Reading input file")
fp = InferenceFile(opts.input_file, "r")

# check if command line specifies variable parameters
if opts.variable_args:
    variable_args = opts.variable_args
else:
    variable_args = fp.variable_args

# get thinned samples for each parameter
table = []
for param in variable_args:
    samples = fp.read_samples(param, thin_start=opts.thin_start,
                              thin_interval=opts.thin_interval)

    # get label and set as first column in table
    row = [fp.read_label(param, html=True)]

    # calculate the score at a given percentile
    # eg. 50 is the median, 16 and 84 correspond to 68 percentile
    quantiles = []
    for q in opts.quantiles:
        quantiles.append( numpy.percentile(samples, 100*q) )

    # add qunatiles to row; we'll quote using scientific notation with
    # 3 sig figs
    row += ['$%s$' %(results.format_value(val, val/100., include_error=False))
        for val in quantiles]

    # add row to table
    table.append(row)

# make HTML table
headers = ["Parameter"] + ["%.2f Quantile"%val for val in opts.quantiles]
# add mathjax header to display latex
html = results.mathjax_html_header() + '\n%s'%(
    str( results.static_table(table, headers) ))

# save HTML table
results.save_fig_with_metadata(html, opts.output_file, {},
                 cmd=" ".join(sys.argv),
                 title="Table of Posterior Parameters",
                 caption="Table with quantiles for variable parameters.")
