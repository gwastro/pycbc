# Copyright (C) 2016 Miriam Cabero Mueller
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

import argparse
import logging
import numpy
import matplotlib
matplotlib.use('agg')
from matplotlib import pyplot
import pycbc.results
from pycbc.inference import option_utils
from pycbc.io.inference_hdf import InferenceFile
from pycbc.results.scatter_histograms import scatter_histogram

parser = argparse.ArgumentParser()

parser.add_argument("--input-file", type=str, required=True,
                    help="Results file path.")
parser.add_argument("--movie-plots", type=int, required=True,
                    help="Number of plots for the movie.")
parser.add_argument("--output-file", type=str, required=True,
                    help="Output plot path without extension.")
parser.add_argument("--parameters", type=str, nargs="+",
                    metavar="PARAM[:LABEL]",
                    help="Name of parameters to plot in same format "
                         "as for pycbc_inference_plot_posterior.")
parser.add_argument('--verbose', action='store_true')
# add scatter and density configuration options
option_utils.add_scatter_option_group(parser) 
option_utils.add_density_option_group(parser)

opts = parser.parse_args()
pycbc.init_logging(opts.verbose)

# Get data
logging.info('Loading parameters.')
fp, parameters, labels, _ = option_utils.results_from_cli(opts,
                            load_samples=False)
nwalkers = fp.nwalkers
njumps = opts.movie_plots
thinint = fp.niterations / njumps
x = fp.read_samples(fp.variable_args, walkers=0, thin_start=0, 
                        thin_interval=thinint)
samples = fp._arraycls((x.size, nwalkers))
zvals = numpy.zeros((x.size, nwalkers))
for walker in range(nwalkers):
    samples[:,walker] = fp.read_samples(fp.variable_args, walkers=walker, 
                                        thin_start=0, thin_interval=thinint)
    if opts.z_arg is not None:
        logging.info("Getting likelihood stats")
        likelihood_stats = fp.read_likelihood_stats(thin_start=0,
                thin_interval=thinint,walkers=walker)
        zvals[:,walker], zlbl = get_zvalues(fp, opts.z_arg, likelihood_stats)
    else:
        zvals = None
        zlbl = None
fp.close()

logging.info('Choosing common characteristics for all figures.')
# Set common min and max for axis
mins = {p:varargs[p].min() for p in parameters}
maxs = {p:varargs[p].max() for p in parameters}
# Set common min and max for colorbar
if opts.vmin is None:
    vmin = zvals.min()
else:
    vmin = opts.vmin
if opts.vmax is None:
    vmax = zvals.max()
else:
    vmax = opts.vmax

# Make each figure
logging.info('Plotting.')
for jump in range(njumps):
    plotargs = samples[jump,:]
    z = zvals[jump,:]
    output = opts.output_file + '%d.png' %jump

    fig, axis_dict = create_multidim_plot(parameters, plotargs, labels=labels,
                        plot_marginal=opts.plot_marginal,
                        plot_scatter=opts.plot_scatter,
                            zvals=z, show_colorbar=not opts.no_colorbar,
                            cbar_label=zlbl, vmin=opts.vmin, vmax=opts.vmax,
                            scatter_cmap=opts.scatter_cmap,
                        plot_density=opts.plot_density,
                        plot_contours=opts.plot_contours,
                            density_cmap=opts.density_cmap,
                            contour_color=opts.contour_color,
                            use_kombine=opts.use_kombine_kde)
#    fig = scatter_histogram(parameters, plotargs, z, labels=labels,
#                            vmin=vmin, vmax=vmax, mins=mins, maxs=maxs)

    pyplot.annotate('Sample %d' %(jump*thinint+1), xy=(0.8,0.95), xycoords='figure fraction')

    fig.savefig(output, bbox_inches='tight', dpi=200)
    pyplot.close()

logging.info('Done.')
