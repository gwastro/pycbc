#!/usr/bin/env python

# Copyright (C) 2025 Alex Correia
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#
"""Estimates the Bayes factor using the Savage-Dickey density ratio from a given
posterior file. 

The Savage-Dickey ratio is defined with respect to a single parameter. The ratio
compares two models: a null hypothesis, where the parameter of interest is fixed
to one value, and a model where this parameter is allowed to vary. The SD
ratio is computed by dividing the value of the variable parameter posterior by
the value of the prior at the null point. Qualitatively, this indicates the
probability with which the null hypothesis is true. It can be shown
(https://doi.org/10.1016/j.cogpsych.2009.12.001) that the Bayes factor in favor
of the null hypothesis can be approximated by the Savage-Dickey ratio. 

We can invert this to estimate the Bayes factor in favor of the variable model.
As an GW analysis example, say we wish to evaluate the presence of a QNM overtone
in the ringdown of a CBC signal. The null hypothesis states that the QNM is not
present, indicated by a QNM amplitude of zero. We can therefore estimate the
Bayes factor in favor of overtone detection by taking the ratio of the 
amplitude prior to the QNM amplitude posterior at 0.

Inputting multiple files evaluates the SD ratio for each file with respect to
the specified parameter. Only one parameter is accepted, and a null value is
required for the given parameter.
"""

import numpy
import pycbc
from pycbc.inference.io import (ResultsArgumentParser, loadfile)
from pycbc.distributions.utils import prior_from_config
from scipy.stats import gaussian_kde

### FIXME: Override the parameters argument that comes from here; only want one
parser = ResultsArgumentParser(defaultparams='all', autoparamlabels=False,
                               description=__doc__)
pycbc.add_common_pycbc_options(parser)
parser.add_argument("--parameter-null-value", required=True,
                    help="Value at which to evaluate the posterior and prior"
                    "when calculating the Savage-Dickey ratio.")
parser.add_argument("--kde-samples", type=int, default=100000,
                    help="The number of samples to use for generating the "
                         "prior KDE. Default 100000.")

opts = parser.parse_args()
pycbc.init_logging(opts.verbose)

# read in the posterior of given parameter
### FIXME: ideally the parameters argument only reads in one parameter
if len(opts.parameters) > 1:
    raise ValueError("Multiple parameters specified. Only one parameter is "
                     "accepted at a time.")
param = opts.parameters[0]
null = float(opts.parameter_null_value)

print(f"Calculating with selected parameter {param} at null value "
      f"{opts.parameter_null_value}")
print(f"=====================================================================")

priors = []
posteriors = []
for file in opts.input_file:
    # read in the prior of given parameter
    fp = loadfile(file, 'r')
    cp = fp.read_config_file()
    prior = prior_from_config(cp)
    # get the bounds of the parameter from the prior
    bounds = prior.bounds[param]
    # generate prior KDE
    prior_samples = prior.rvs(opts.kde_samples)[param]
    neg_prior_samples = -1 * prior_samples
    prior_pdf = gaussian_kde(numpy.append(prior_samples, neg_prior_samples))
    # read in posterior samples
    pos = fp.read_samples([param])[param]
    neg_pos = -1 * pos
    pos_pdf = gaussian_kde(numpy.append(pos, neg_pos))
    # normalize KDEs
    pos_norm = pos_pdf.integrate_box_1d(bounds.min, bounds.max)
    prior_norm = prior_pdf.integrate_box_1d(bounds.min, bounds.max)
    B_norm = pos_norm / prior_norm

    # evaluate the SD ratio at the specified null value
    B = prior_pdf(null) / pos_pdf(null)
    B *= B_norm

    ### FIXME: For now I'm just printing this; should we save this to file 
    ### somewhere?
    print(f"File: {file}")
    if B > 1e-3:
        print(f"Bayes factor: {B[0]:.3f}")
    else:
        print(f"Bayes factor: {B[0]:.5e}")
    print("")

