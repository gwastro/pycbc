#! /usr/bin/evn python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import corner
import logging
import matplotlib as mpl; mpl.use("Agg")
import matplotlib.pyplot as plt
import numpy
import sys
from pycbc import inference, pnutils, results
from pycbc.io.mcmc import MCMCFile
from pycbc.workflow import WorkflowConfigParser

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_mcmc_plot_prior [--options]",
    description="Plots corner plot of prior from MCMC.")

# add input options
parser.add_argument("--input-file", type=str, required=True,
    help="Path to input HDF file.")

# add thinning options
parser.add_argument("--thin-start", type=int, default=0,
    help="Sample number to start collecting samples to plot.")
parser.add_argument("--thin-interval", type=int, default=1,
    help="Interval to use for thinning samples.")

# add prior options
parser.add_argument("--variable-args", type=str, nargs="+",  default=[],
    help="Name of parameters varied in MCMC.")
parser.add_argument("--config-file", type=str, required=True,
    help="A file parsable by pycbc.workflow.WorkflowConfigParser.")
parser.add_argument("--bins", type=int, required=True,
    help="Number of points to evaluator parameter distributions.")
parser.add_argument("--iterations", type=int, required=True,
    help="Number of samples to collect from each prior distribution.")

# output plot options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="")

# parse the command line
opts = parser.parse_args()

# setup log
if opts.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARN
logging.basicConfig(format="%(asctime)s : %(message)s", level=log_level)

# read configuration file
logging.info("Reading configuration file")
cp = WorkflowConfigParser([opts.config_file])

# get variable parameters in MCMC from configuration file
if len(opts.variable_args):
    variable_args = opts.variable_args
else:
    variable_args = cp.options("variable_args")

# get distribution to use for evaluating prior
# construct class that will return the prior
distributions = []
for subsection in cp.get_subsections("prior"):
    name = cp.get_opt_tag("prior", "name", subsection)
    distributions.append( inference.priors[name].from_config(cp, "prior", subsection) )

# read input file
logging.info("Reading input file")
fp = MCMCFile(opts.input_file, "r")

# make a subplot for each distribution
fig, axs = plt.subplots(len(distributions))
axs = [axs] if len(distributions) is 1 else axs

# loop over distributions from prior
for i,dist in enumerate(distributions):

    # get bounds for each parameter
    params = dist.params
    if len(params) > 1:
        raise ValueError("Can only handle one variable parameter at a time")
    if params[0] not in variable_args:
        continue
    bounds = dist.bounds[params[0]]

    # evaulate PDF between the bounds
    pdf = []
    x = []
    step = float(bounds[1]-bounds[0])/opts.bins
    for j in numpy.arange(bounds[0], bounds[1], step):
        pdf.append( dist.pdf(**{params[0]:j}) )
        x.append(j)

    # plot each distribution as a different line on the subplot
    axs[i].plot(x, pdf, label="PDF")

    # read samples from file
    samples = fp.read_samples(params[0], thin_start=opts.thin_start,
                                    thin_interval=opts.thin_interval)
    samples = numpy.concatenate(samples)

    # plot histogram of samples
    weights = numpy.ones(len(samples)) / float(len(samples))
    axs[i].hist(samples, bins=opts.bins, weights=weights,
                histtype="stepfilled", fc=(0, 0, 0, 0), label="Samples")

    # y-axis label
    axs[i].set_ylabel(", ".join([p for p in dist.params]))

    # y-axis limits
    axs[i].set_ylim(0, 1.1)

    # x-axis limits
    low = bounds[0] - 5 * step
    high = bounds[1] + 5 * step
    axs[i].set_xlim(low, high)

    # legend
    if i == 0:
        axs[i].legend(loc="upper right")

# save figure with meta-data
caption_kwargs = {
    "parameters" : ", ".join(variable_args),
}
caption = """The probability density function (PDF) is drawn in blue. Samples
drawn from the MCMC are shown as a histogram outlined in black. The histogram
is normalized to the total number of samples."""
title = "Prior distribution for {parameters}".format(**caption_kwargs)
results.save_fig_with_metadata(fig, opts.output_file,
                               cmd=" ".join(sys.argv),
                               title=title,
                               caption=caption)
plt.close()

# exit
logging.info("Done")


