#! /usr/bin/evn python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import corner
import h5py
import logging
import matplotlib as mpl; mpl.use("Agg")
import matplotlib.pyplot as plt
import numpy
from pycbc import inference, pnutils
from pycbc.workflow import WorkflowConfigParser

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_mcmc_plot_prior [--options]",
    description="Plots corner plot of prior from MCMC.")

# add prior options
parser.add_argument("--config-file", type=str, required=True,
    help="A file parsable by pycbc.workflow.WorkflowConfigParser.")
parser.add_argument("--iterations", type=int, required=True,
    help="Number of samples to collect from each prior distribution.")

# output plot options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="")

# parse the command line
opts = parser.parse_args()

# setup log
if opts.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARN
logging.basicConfig(format="%(asctime)s : %(message)s", level=log_level)

# read configuration file
logging.info("Reading configuration file")
cp = WorkflowConfigParser([opts.config_file])

# get variable parameters in MCMC from configuration file
variable_args = cp.options("variable_args")

# get distribution to use for evaluating prior
# construct class that will return the prior
distributions = []
for param in variable_args:
    distributions.append( inference.distribution_from_config(cp, "prior", param) )
prior = inference.PriorEvaluator(variable_args, *distributions)

# loop over number of samples to draw from prior
#for i in range(opts.iterations):




