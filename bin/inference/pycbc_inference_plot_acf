#! /usr/bin/env python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import matplotlib as mpl; mpl.use("Agg")
import matplotlib.pyplot as plt
import numpy
import sys
import pycbc
from pycbc import results
from pycbc.inference import option_utils

# command line usage
parser = argparse.ArgumentParser(
    description="Plots autocorrelation function from inference samples.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="Print logging info.")
# output plot options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")
# add plotting options
parser.add_argument("--ymin", type=float,
    help="Minimum value to plot on y-axis.")
parser.add_argument("--ymax", type=float,
    help="Maximum value to plot on y-axis.")
# add results group
option_utils.add_inference_results_option_group(parser)
parser.add_argument("--per-walker", action="store_true", default=False,
    help="Plot the ACF for each walker separately. Default is to average "
         "parameter values over the walkers, then compute the ACF for the "
         "averaged chain. Warning: turning this option on can significantly "
         "increase the run time.")
parser.add_argument("--walkers", type=int, nargs="+", default=None,
    help="Only include the given walkers when computing the ACF.")

# parse the command line
opts = parser.parse_args()

# setup log
pycbc.init_logging(opts.verbose)

# load the results
fp, parameters, labels, _ = option_utils.results_from_cli(opts,
    load_samples=False)

# calculate autocorrelation function
logging.info("Calculating autocorrelation functions")
acfs = fp.sampler_class.compute_acfs(fp, start_index=opts.thin_start,
                                     end_index=opts.thin_end,
                                     per_walker=opts.per_walker,
                                     walkers=opts.walkers,
                                     parameters=parameters)

# plot autocorrelation
logging.info("Plotting autocorrelation functions")
fig = plt.figure()
ax = fig.add_subplot(111)
for pi,param in enumerate(parameters):
    if opts.per_walker:
        for wi in range(acfs.shape[0]):
            ax.plot(acfs[param][wi,:], alpha=0.25)
    else:
        ax.plot(acfs[param], label=labels[pi])
ax.legend()
plt.xlabel("iteration")
plt.ylabel(r'autocorrelation function')

# format plot
if opts.ymin:
    plt.ylim(ymin=opts.ymin)
if opts.ymax:
    plt.ylim(ymax=opts.ymax)

# save figure with meta-data
caption_kwargs = {
    "parameters" : ", ".join(labels),
}
caption = """Autocorrelation function (ACF) from all the walker chains for the
parameters. Each line is an ACF for a chain of walker samples."""
title = "Autocorrelation Function for {parameters}".format(**caption_kwargs)
results.save_fig_with_metadata(fig, opts.output_file,
                               cmd=" ".join(sys.argv),
                               title=title,
                               caption=caption)
plt.close()

# exit
fp.close()
logging.info("Done")
