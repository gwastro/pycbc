#! /usr/bin/env python

# Copyright (C) 2016 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import corner
import itertools
import logging
import matplotlib as mpl; mpl.use("Agg")
import matplotlib.pyplot as plt
import numpy
import sys
from pycbc import inference, results
from pycbc.io.inference_hdf import read_label_from_config
from pycbc.workflow import WorkflowConfigParser

def cartesian(arrays):
    """ Returns a cartesian product from a list of iterables.
    """
    return numpy.array([numpy.array(element) for element in itertools.product(*arrays)])

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_inference_plot_prior [--options]",
    description="Plots prior distributions.")

# add input options
parser.add_argument("--config-files", type=str, nargs="+", required=True,
    help="A file parsable by pycbc.workflow.WorkflowConfigParser.")
parser.add_argument("--section", type=str, default="prior",
    help="Name of section that contains subsections with distribution configurations.")

# add prior options
parser.add_argument("--bins", type=int, required=True,
    help="Number of points to grid a parameter.")

# add output options
parser.add_argument("--output-file", type=str, required=True,
    help="Path to output plot.")

# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
    help="")

# parse the command line
opts = parser.parse_args()

# setup log
if opts.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARN
logging.basicConfig(format="%(asctime)s : %(message)s", level=log_level)

# get variable_args from the configuration file
logging.info("Reading configuration files")
cp = WorkflowConfigParser(opts.config_files)
variable_args = sorted(cp.options("variable_args"))
ndim = len(variable_args)

# get prior distribution for each variable parameter
logging.info("Constructing prior")
distributions = []
for subsection in cp.get_subsections("prior"):
    name = cp.get_opt_tag("prior", "name", subsection)
    distributions.append( inference.priors[name].from_config(cp, "prior", subsection) )

# construct class that will return draws from the prior
prior = inference.PriorEvaluator(variable_args, *distributions)

# get all points in space to calculate PDF
logging.info("Getting grid of points")
vals = numpy.zeros(shape=(ndim,opts.bins))
bounds = [{}] * ndim
for dist in distributions:
    for param in dist.params:
        idx = variable_args.index(param)
        step = float(dist.bounds[param][1]-dist.bounds[param][0]) / opts.bins
        vals[idx,:] = numpy.arange(dist.bounds[param][0],dist.bounds[param][1],step)
        bounds[idx] = dist.bounds
pts = cartesian(vals)

# evaulate PDF between the bounds
logging.info("Calculating PDF")
pdf = []
for pt in pts:
    pt_dict = dict([(param,pt[j]) for j,param in enumerate(variable_args)])
    pdf.append( sum([dist.pdf(**pt_dict) for dist in distributions]) )
pdf = numpy.array(pdf)

# get label for each variable parameter
labels = [read_label_from_config(cp, param) for param in variable_args]

# plot
logging.info("Plotting")
fig = corner.corner(pts, weights=pdf, labels=labels, plot_contours=False,
                    plot_datapoints=False)

# remove the 1-D histograms
delaxs = fig.axes[::ndim+1]
[fig.delaxes(ax) for ax in delaxs]

# save figure with meta-data
caption = """This plot shows the probability density function (PDF) from the 
prior distributions."""
title = "Prior Probability Density Functions"
results.save_fig_with_metadata(fig, opts.output_file,
                               cmd=" ".join(sys.argv),
                               title=title,
                               caption=caption)
plt.close()

# exit
logging.info("Done")
