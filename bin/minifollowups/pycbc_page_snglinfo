#!/bin/env python
# Copyright (C) 2015 Alexander Harvey Nitz
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
""" Make tables describing a sngl event"""
import sys, h5py, matplotlib, numpy, datetime, argparse
matplotlib.use('Agg')
import pylab
import lal
import pycbc.version, pycbc.events, pycbc.results, pycbc.pnutils
from pycbc.io import hdf

# JavaScript for searching the aLOG
html = """<script type="text/javascript">
function redirect(form,way)
{
        // Set location to form and submit.
        if(form != '')
        {
                document.forms[form].action=way;
                document.forms[form].submit();
        }
        else
        {
                window.top.location = way;
        }
}
</script>"""

def get_summary_page_link(ifo, utc_time):
    """ Return a string that links to the summary page for this ifo """
    search_form = """<form name="%s_alog_search" id="%s_alog_search" method="post">
<input type="hidden" name="srcDateFrom" id="srcDateFrom" value="%s" size="20" />
<input type="hidden" name="srcDateTo" id="srcDateTo" value="%s" size="20" />
</form>
"""
    data = {'H1':"""H1&nbsp;<a href=https://ldas-jobs.ligo-wa.caltech.edu/~detchar/summary/day/%s>Summary</a>&nbsp;<a onclick="redirect('h1_alog_search','https://alog.ligo-wa.caltech.edu/aLOG/includes/search.php?adminType=search'); return true;">aLOG</a>""",
            'L1':"""L1&nbsp;<a href=https://ldas-jobs.ligo-la.caltech.edu/~detchar/summary/day/%s>Summary</a>&nbsp;<a onclick="redirect('l1_alog_search','https://alog.ligo-la.caltech.edu/aLOG/includes/search.php?adminType=search'); return true;">aLOG</a>""" }
    if ifo not in data:
        return ifo
    else:
        euro_utc = '%02d-%02d-%4d' % (utc_time[1], utc_time[2], utc_time[0])
        ext = '%4d%02d%02d' % (utc_time[0], utc_time[1], utc_time[2]) 
        return_string = search_form % (ifo.lower(), ifo.lower(), euro_utc, euro_utc)
        return_string += data[ifo] % ext
        return return_string


parser = argparse.ArgumentParser()
parser.add_argument('--version', action='version',
    version=pycbc.version.git_verbose_msg)
parser.add_argument('--verbose', action='store_true')
parser.add_argument('--single-trigger-file',
              help="HDF format single detector trigger files for the full "
                   "data run")
parser.add_argument('--bank-file',
              help="HDF format template bank file")
parser.add_argument('--output-file')
# CURRENTLY UNUSED, but may be needed if using foreground censor
parser.add_argument('--statmap-file',
    help="The HDF format clustered coincident statmap file containing the "
         "result triggers. ")
parser.add_argument('--veto-file',
    help="The veto file to be used if vetoing triggers (optional).")
parser.add_argument('--veto-segment-name',
    help="If using veto file must also provide the name of the segment to use "
         "as a veto.")
parser.add_argument('--instrument', help="Name of ifo (e.g. H1)")
parser.add_argument('--n-loudest', type=int,
    help="The trigger Nth loudest trigger to examine, use with statmap file")
parser.add_argument('--ranking-statistic',
                help="How to rank triggers when determining loudest triggers.")

args = parser.parse_args()
pycbc.init_logging(args.verbose)

# Get the nth loudest trigger from the output of pycbc_coinc_statmap
sngl_file = hdf.SingleDetTriggers(args.single_trigger_file, args.bank_file,
                args.veto_file, args.veto_segment_name, None, args.instrument)

sngl_file.mask_to_n_loudest_clustered_events(n_loudest=args.n_loudest+1,
                                      ranking_statistic=args.ranking_statistic)
# Restrict to only the nth loudest, instead of all triggers up to nth loudest
stat = sngl_file.stat[-1]
sngl_file.mask = sngl_file.mask[-1]

# make a table for the single detector information ############################
headers = ["Detector&nbsp;Status", "UTC", "Time", "SNR", sngl_file.stat_name,
           "Chisq", "Bins", "Phase", "M1", "M2", "Mc", "S1z", "S2z",
           "Duration"]

time = sngl_file.end_time 
utc = lal.GPSToUTC(int(time))[0:6]
data = [[get_summary_page_link(args.instrument, utc),
        str(datetime.datetime(*utc)),
        time,
        '%5.2f' % sngl_file.snr,
        '%5.2f' % stat,
        '%5.2f' % sngl_file.rchisq,            
        '%5.2f' % sngl_file.get_column('chisq_dof'),
        '%5.2f' % sngl_file.get_column('coa_phase'),
        '%5.2f' % sngl_file.mass1,
        '%5.2f' % sngl_file.mass2,
        '%5.2f' % sngl_file.mchirp,
        '%5.2f' % sngl_file.spin1z,
        '%5.2f' % sngl_file.spin2z,
        '%5.2f' % sngl_file.template_duration,
           ]]

html += str(pycbc.results.static_table(data, headers))
###############################################################################

pycbc.results.save_fig_with_metadata(html, args.output_file, {},
                        cmd = ' '.join(sys.argv),
                        title = 'Parameters of Single detector Event Ranked %s' % (args.n_loudest + 1),
                        caption = 'Parameters of the single detector event ranked number %s by %s. The figures below show the mini-followup data for this event.' % (args.n_loudest + 1, sngl_file.stat_name))
