#!/usr/bin/env python
# Copyright (C) 2016 Alex Nielsen, Ian Harry
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
""" Plot effective fitting factor from a bunch of point-source files.
"""
from __future__ import division

import sys
import h5py
import argparse
import numpy
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
# Ensure latex rendering
matplotlib.rc('text', usetex=True)

from pycbc import version
from pycbc import results

parser = argparse.ArgumentParser(usage='',
    description="Plot fitting factor distribution.")
parser.add_argument('--input-file', default=None, required=True,
                    help="List of input files.")
parser.add_argument('--output-file', default=None, required=True,
                    help="Output file.")
 
opt = parser.parse_args()

curr_fp = h5py.File(opt.input_file, 'r')
m1 = curr_fp['inj_params/mass1'][:]
m2 = curr_fp['inj_params/mass2'][:]
s1z = curr_fp['inj_params/spin1z'][:]
s2z = curr_fp['inj_params/spin2z'][:]
mtot = m1 + m2
eta = m1*m2 / (mtot*mtot)
effspin = (s1z*m1 + s2z*m2) / mtot
match = curr_fp['trig_params/match'][:]
curr_fp.close()

try:
    cmap = plt.get_cmap('magma')
except ValueError:
    from pycbc.future import cmaps
    cmap = cmaps['magma']

pointsize=4
fig, axarr = plt.subplots(nrows=3, ncols=2)
fig.subplots_adjust(left=0.1, bottom=0.1, right=0.8, top=0.96, wspace=0.3,
                     hspace=0.3)
cax = axarr[0, 0]
cax.autoscale_view('tight')
cax.scatter(s1z, s2z, c=match, zorder=10, s=pointsize, linewidth=0, cmap=cmap)
cax.set_xlabel('Injected spin1')
cax.set_ylabel('Injected spin2')

cax = axarr[0, 1]
cax.autoscale_view('tight')
cax.scatter(eta, effspin, c=match, zorder=10, s=pointsize, linewidth=0,
            cmap=cmap)
cax.set_xlabel('Injected eta')
cax.set_ylabel('Injected effective spin')

cax = axarr[1,0]
cax.autoscale_view('tight')
cax.scatter(m1, m2, c=match, zorder=10, s=pointsize, linewidth=0, cmap=cmap)
cax.set_xlabel('Injected mass1')
cax.set_ylabel('Injected mass2')

cax = axarr[1,1]
cax.autoscale_view('tight')
image = cax.scatter(mtot, effspin, c=match, zorder=10, s=pointsize,
                    linewidth=0, cmap=cmap)
cax.set_xlabel('Injected total mass')
cax.set_ylabel('Injected effective spin')

cax = axarr[2,0]
cax.autoscale_view('tight')
hist, bins = numpy.histogram(match, bins=50)
width = 1.0 * (bins[1] - bins[0])
center = (bins[:-1] + bins[1:]) / 2
cax.bar(center, hist, align='center', width=width, edgecolor="none")
cax.set_xlabel('fitting factor')
cax.set_ylabel('number')
cax.set_yscale('log')
cax.set_ylim([0.9,1000])

cax = axarr[2,1]
cax.autoscale_view('tight')
normed_hist = hist / hist.sum()
cumulative = numpy.cumsum(normed_hist)
cax.bar(center, cumulative, align='center', width=width, edgecolor="none")
cax.set_xlabel('fitting factor')
cax.set_ylabel('cumulative fraction')
cax.set_yscale('log')
cax.set_ylim([0,1])

fig.subplots_adjust(right=0.8)
cbar_ax = fig.add_axes([0.85, 0.05, 0.05, 0.91])
cbar = fig.colorbar(image, cax=cbar_ax)
cbar.set_label('Recovered fitting factor')

caption="FILL THIS IN"
title="FILL THIS IN"

fig_kwds = {}
if '.png' in opt.output_file:
    fig_kwds['dpi'] = 200

results.save_fig_with_metadata(fig, opt.output_file,
                               fig_kwds=fig_kwds, title=title,
                               cmd=' '.join(sys.argv), caption=caption)
