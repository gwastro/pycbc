#!/usr/bin/python

"""
Make a plot of the histograms of compression factor for a given bank
with compressed waveforms
"""

import argparse
import matplotlib
matplotlib.use("agg")
from matplotlib import pyplot as plt
import numpy as np
import logging
import sys

import pycbc
from pycbc.io import HFile
from pycbc.results import save_fig_with_metadata
from pycbc.waveform import bank
import pycbc.tmpltbank as tmpltbank

parser = argparse.ArgumentParser()
pycbc.add_common_pycbc_options(parser)
parser.add_argument(
    "--bank-files",
    required=True,
    nargs="+",
    help="Template bank file(s) containing compressed waveforms",
)
parser.add_argument(
    "--output",
    required=True,
    help="Output plot filename",
)
parser.add_argument(
    "--n-bins",
    type=int,
    default=128,
    help="Number of bins used when making the histogram, default=128",
)
parser.add_argument(
    "--log-comparison",
    action="store_true",
    help="Flag to plot comparison values on a log scale",
)
parser.add_argument(
    "--log-compression",
    action="store_true",
    help="Flag to histogram/plot compression factor on a log scale",
)
parser.add_argument(
    "--histogram-density",
    action="store_true",
    help="Flag to indicate that the histogram should be a density "
         "rather than a count per bin",
)
parser.add_argument(
    "--log-histogram",
    action="store_true",
    help="Flag to indicate that histogram values should be plotted "
         "on a log scale"
)
parser.add_argument(
    "--comparison-parameter",
    default="template_duration:Template duration (s)",
    help=(
        "Parameter to be compared to in the scatter plot. Supplied "
        "as a PARAMETER:NAME pair. PARAMETER should be one of %s, NAME "
        "can contain latex symbols. Default template_duration:'Template "
        "duration (s)'"
    ) % ('{' + ', '.join(tmpltbank.conversion_options) + '}')
)
args = parser.parse_args()

try:
    comparison_parameter, comparison_label = \
        args.comparison_parameter.split(':')
except ValueError:
    raise parser.error(
        "Incorrect format of --comparison-parameter, got %s. See help" %
        args.comparison_parameter
    )

if comparison_parameter not in tmpltbank.conversion_options:
    raise parser.error(
        "--comparison-parameter %s not in conversion options %s, see help"
        % (comparison_parameter, ', '.join(tmpltbank.conversion_options))
    )

pycbc.init_logging(args.verbose)

# Quieten the matplotlib logger
plt.set_loglevel("info" if args.verbose else "warning")
logging.getLogger('matplotlib.font_manager').setLevel(logging.ERROR)

logging.info("Getting information from the bank")

# The three things we want from the banks:
compression_factor = []
comparison_values = []
approximants = []

for i, bank_fname in enumerate(args.bank_files):
    logging.debug(
        "Bank %d out of %d: %s",
        i,
        len(args.bank_files),
        bank_fname
    )

    with HFile(bank_fname, "r") as bank_f:
        compressed_grp = bank_f["compressed_waveforms"]
        thashes = bank_f["template_hash"][:]
        hash_order = np.argsort(thashes)
        # These will be in hash order:
        logging.debug("Getting compression factors")
        compression_factor += [
            compressed_grp[comp_grp].attrs["compression_factor"]
            for comp_grp in compressed_grp.keys()
        ]
        logging.debug("Getting approximants")
        # These are in template_id order, so use hash_order to get them back:
        approximants += [apx.decode() for apx in bank_f["approximant"][:][hash_order]]
        logging.debug("Getting comparison values: %s", comparison_parameter)
        comparison_values += list(tmpltbank.get_bank_property(
            comparison_parameter,
            bank_f,
            template_ids=hash_order
        ))

approximants = np.array(approximants)
comparison_values = np.array(comparison_values)
compression_factor = np.array(compression_factor)

print(approximants.size)
print(comparison_values.size)
print(compression_factor.size)

# Store the max/min factors, as these are used for setting
# histogram / plot limits
max_factor = compression_factor.max()
min_factor = compression_factor.min()

# Set the bin edges
# Add 5% in either linear or log space to the edges used
# for the bins and plots, so that things arent too cramped
# in the plots
if args.log_compression:
    factor_range = np.log10(max_factor) - np.log10(min_factor)
    factor_max = np.log10(max_factor) + 0.05 * factor_range
    factor_min = max(np.log10(min_factor) - 0.05 * factor_range, 0)
    bin_edges = np.logspace(
        factor_min,
        factor_max,
        args.n_bins
    )
else:
    factor_range = max_factor - min_factor
    factor_min = max(min_factor - 0.05 * factor_range, 1)
    factor_max = max_factor + 0.05 * factor_range
    bin_edges = np.linspace(
        factor_min,
        factor_max,
        args.n_bins
    )

# These are used as the x values in the histogram plot;
# this will be each bin edge repeated twice in order,
# except the first and last which will appear once
bin_step = np.concatenate(tuple(zip(bin_edges[:-1], bin_edges[1:])))

fig, axes = plt.subplots(1, 2, figsize=(8,4), layout="constrained")

# Make the histogram and scatter points for each approximant separately
apx_names, apx_count = np.unique(approximants, return_counts=True)
apx_colors = {
    apx_name: col for apx_name, col in
    zip(apx_names, plt.rcParams['axes.prop_cycle'].by_key()['color'])
}
for apx_name, apx_count in zip(apx_names, apx_count):
    # Filter to just this approximant
    this_appx = approximants == apx_name

    logging.info("Making %s compression factor histogram", apx_name)
    hist, _ = np.histogram(
        compression_factor[this_appx],
        bins=bin_edges,
        density=args.histogram_density,
    )
    if args.histogram_density:
        hist *= apx_count / compression_factor.size

    logging.info("Plotting %s", apx_name)
    logging.debug("Plotting histogram")
    axes[0].plot(
        bin_step,
        np.repeat(hist, 2),
        c=apx_colors[apx_name],
        label=f'{apx_name}: {apx_count}',
    )
    logging.debug(
        "Plotting compression vs %s scatter",
        args.comparison_parameter
    )
    axes[1].scatter(
        comparison_values[this_appx],
        compression_factor[this_appx],
        alpha=0.05,
        c=apx_colors[apx_name],
        s=5,
    )
    # This one is for use in the legend:
    axes[1].scatter(
        [],[],
        c=apx_colors[apx_name],
        label=f'{apx_name}: {apx_count}'
    )

logging.debug("Setting scales and limits of axes")
if args.log_compression:
    axes[0].set_xlim(10 ** factor_min, 10 ** factor_max)
    axes[0].set_xscale("log")
    axes[1].set_yscale("log")
    axes[1].set_ylim(10 ** factor_min, 10 ** factor_max)
else:
    axes[0].set_xlim(factor_min, factor_max)
    axes[1].set_ylim(factor_min, factor_max)

if args.log_comparison:
    axes[1].set_xscale("log")

if args.log_histogram:
    axes[0].set_yscale("log")
else:
    axes[0].set_ylim(bottom=0)

logging.info("Setting axes labels")
if args.histogram_density:
    axes[0].set_ylabel("Template Density")
else:
    axes[0].set_ylabel("Number of Templates")
axes[0].set_xlabel("Compression Factor")

axes[1].set_xlabel(comparison_label)
axes[1].set_ylabel("Compression Factor")

axes[0].legend(loc='upper right')
axes[1].legend()

axes[0].grid(zorder=-100)
axes[1].grid(zorder=-100)

caption = (
    "Plot showing the a histogram of compression factor (left) and a "
    "scatter plot of compression factor vs %s (%s) (right). "
    "Legend entries indicate the number of templates per approximant. "
) % (comparison_label, comparison_parameter)

if args.histogram_density:
    caption += "Density for each histogram is weighted by the number of templates "
save_fig_with_metadata(
    fig,
    args.output,
    title="Bank compression vs %s" % comparison_label,
    caption=caption,
    cmd=' '.join(sys.argv)
)
logging.info("Done!")
