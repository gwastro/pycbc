#! /usr/bin/env python

"""
Program for running a faithfulness comparisons workflow analysis between two approximants
and generate files containing the match between them and plots.
"""

import os
import pycbc
import pycbc.workflow as wf
import logging
import configparser as ConfigParser
import numpy as np
import logging
import argparse
from pycbc.workflow.jobsetup import (
    select_generic_executable,
    int_gps_time_to_str,
    PycbcCreateInjectionsExecutable,
    LalappsInspinjExecutable,
)
from pycbc.workflow import setup_splittable_dax_generated

__version__ = pycbc.version.git_verbose_msg


def get_ini_opts(confs, section):
    arg = []
    value = []
    for opt in confs.options(section):
        val = confs.get(section, opt)
        arg.append(opt)
        value.append(val)

    return arg, value


class CreateInjectionExecutable(wf.Executable):
    """Class for running create_inj_file"""

    current_retention_level = wf.Executable.ALL_TRIGGERS

    def create_node(self, analysis_time, extra_tags=None):
        if extra_tags is None:
            extra_tags = []

        node = wf.Executable.create_node(self)

        node.new_output_file_opt(
            analysis_time, ".xml", "--output", tags=self.tags + extra_tags
        )
        return node


class FaithsimExecutable(wf.Executable):
    """Class for running pycbc_faithsim"""

    current_retention_level = wf.Executable.ALL_TRIGGERS

    def create_node(self, analysis_time, param_file, extra_tags=None):
        if extra_tags is None:
            extra_tags = []
        node = wf.Executable.create_node(self)

        node.add_input_opt("--param-file", param_file)

        node.new_output_file_opt(
            analysis_time, ".dat", "--match-file", tags=self.tags + extra_tags
        )
        return node


class CollectResultsExecutable(wf.Executable):
    """Class for collecting the results of the faithsim script"""

    current_retention_level = wf.Executable.ALL_TRIGGERS

    def create_node(self, analysis_time, match_list, bank_list, extra_tags=None):
        if extra_tags is None:
            extra_tags = []
        node = wf.Executable.create_node(self)

        for match in match_list:
            node.add_input_opt("--inputs-match", match)
        for bank in bank_list:
            node.add_input_opt("--inputs-bank", bank)

        node.new_output_file_opt(
            analysis_time, ".dat", "--output", tags=self.tags + extra_tags
        )

        return node


class CollectFullResultsExecutable(wf.Executable):
    """class for adding some parameters in the resulting .dat file from collect results script"""

    current_retention_level = wf.Executable.ALL_TRIGGERS

    def create_node(self, analysis_time, collect_file, extra_tags=None):
        if extra_tags is None:
            extra_tags = []
        node = wf.Executable.create_node(self)

        node.add_input_opt("--input-collect-results", collect_file)

        node.new_output_file_opt(
            analysis_time, ".dat", "--output", tags=self.tags + extra_tags
        )

        return node


class FaithSimPlotExecutable(wf.Executable):
    """Class for running pycbc_faithsim_plot"""

    current_retention_level = wf.Executable.ALL_TRIGGERS

    def create_node(
        self,
        analysis_time,
        input_file,
        config,
        subsec,
        extra_tags=None,
    ):
        if extra_tags is None:
            extra_tags = []
        node = wf.Executable.create_node(self)

        node.add_input_opt("--input-file", input_file)

        confs = ConfigParser.ConfigParser()
        confs.read(config)

        arg, value = get_ini_opts(confs, subsec)
        for i in range(len(arg)):
            node.add_opt("--" + arg[i], value[i])

        node.new_output_file_opt(analysis_time, ".png", "--output-plot", tags=self.tags)

        return node


parser = argparse.ArgumentParser(description=__doc__[:1])
parser.add_argument("--version", action="version", version=__version__)
wf.add_workflow_command_line_group(parser)
wf.add_workflow_settings_cli(parser)
args = parser.parse_args()

workflow = wf.Workflow(args)

config_path = os.path.abspath(args.config_files[0])

wf.makedir(args.output_dir)
os.chdir(args.output_dir)

wf.makedir("match")
wf.makedir("collect_results")
wf.makedir("injections")
wf.makedir("bank")
wf.makedir("log")
wf.makedir("plots")

num_banks = workflow.cp.get("splitbank", "num_banks")

injections_exe = CreateInjectionExecutable(
    workflow.cp,
    "lalapps_inspinj",
    ifos=["H1", "L1", "V1"],
    out_dir="injections",
    tags=["inj"],
)

inj_node = injections_exe.create_node(workflow.analysis_time)
workflow += inj_node

inj = inj_node.output_files[0]

split_exe = wf.PycbcSplitBankXmlExecutable(
    workflow.cp, "pycbc_splitbank", num_banks=num_banks, out_dir="bank"
)
spltbank_node = split_exe.create_node(inj)

workflow += spltbank_node

faithsim_exe = FaithsimExecutable(
    workflow.cp, "pycbc_faithsim", ifos=["H1", "L1", "V1"], out_dir="match"
)

collect_exe = CollectResultsExecutable(
    workflow.cp,
    "pycbc_faithsim_collect_results",
    ifos=["H1", "L1", "V1"],
    out_dir="collect_results",
)

faithsim_files = wf.FileList([])

for i in range(int(num_banks)):
    bank = spltbank_node.output_files[i]
    faithsim_node = faithsim_exe.create_node(
        workflow.analysis_time,
        param_file=bank,
        extra_tags=["match-%i" % i],
    )
    workflow += faithsim_node
    faithsim_files.append(faithsim_node.output_file)

collect_node = collect_exe.create_node(
    workflow.analysis_time,
    faithsim_files,
    spltbank_node.output_files,
    extra_tags=["result-"],
)
workflow += collect_node
collect_results = collect_node.output_files[0]

full_results_exe = CollectFullResultsExecutable(
    workflow.cp,
    "pycbc_faithsim_collect_full_results",
    ifos=["H1", "L1", "V1"],
    out_dir="collect_results",
)

full_results_node = full_results_exe.create_node(
    workflow.analysis_time, collect_results, extra_tags=["full_result-"]
)

workflow += full_results_node

collect_full_results = full_results_node.output_files[0]

subsections = [
    sec for sec in workflow.cp.sections() if sec.startswith("pycbc_faithsim_plots")
]

for subsec in subsections:
    endname = subsec.replace("pycbc_faithsim_plots", "")
    plot_exe = FaithSimPlotExecutable(
        workflow.cp,
        "pycbc_faithsim_plot",
        ifos=["H1", "L1", "V1"],
        out_dir="plots",
        tags=[endname],
    )
    plot_node = plot_exe.create_node(
        workflow.analysis_time, collect_full_results, config_path, subsec
    )

    workflow += plot_node

workflow.save()
