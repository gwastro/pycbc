#!/usr/bin/env python

import argparse
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm
import pylab
from numpy import *
from ligo.lw import utils, table, lsctables
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import glob
from pycbc import pnutils
bfields = ('match', 'overlap', 'time_offset', 'sigma1', 'sigma2', 'mass1',
           'mass2', 'spin1x', 'spin1y', 'spin1z', 'spin2x', 'spin2y',
           'spin2z', 'inclination', 'latitude', 'longitude',
           'polarization', 'coa_phase')
dtypeo={'names': bfields,
        'formats': ('f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8',
                    'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8')}
                    
def basic_scatter(out_name, xname, yname, title, xval, yval,  
                  cval=None, cname="", vmin=0, vmax=1, xmin=None, 
                  ymin=None, majorL=None, minorL=None):
    cmap = matplotlib.cm.jet
    cmap.set_under(color='gray')
    fig = pylab.figure(num=None, figsize=(10, 5))
    pylab.scatter(xval, yval, c=cval, linewidths=0, s=3, vmin=vmin, vmax=vmax, cmap=cmap, alpha=0.7)
    if cval is not None:
        bar = pylab.colorbar()
        bar.set_label(cname)
        
    pylab.xlabel(xname)
    pylab.ylabel(yname)
    
    if xmin is None:
        xmin = min(xval)
        
    if ymin is None:
        ymin = min(yval)
        
    pylab.xlim(xmin, max(xval))
    pylab.ylim(ymin, max(yval))
    
    ax = fig.gca()
    if majorL:
        ax.xaxis.set_major_locator(MultipleLocator(majorL))
        ax.yaxis.set_major_locator(MultipleLocator(majorL))
    if minorL:
        ax.xaxis.set_minor_locator(MultipleLocator(minorL))
        ax.yaxis.set_minor_locator(MultipleLocator(minorL))
    
    fol = 'plots/' 
    
    pylab.grid()
    pylab.title(title)
    pylab.savefig(out_name, dpi=50)

parser = argparse.ArgumentParser(usage='',
        description="Plots")
parser.add_argument('--input-file')
parser.add_argument('--parameter-x')
parser.add_argument('--parameter-y')
parser.add_argument('--parameter-z')
parser.add_argument('--output-plot')
parser.add_argument('--output-plot2', default=None)

args = parser.parse_args()

data = loadtxt(args.input_file, dtype=dtypeo)

mmass1 = maximum(data['mass1'], data['mass2'])
mmass2 = minimum(data['mass1'], data['mass2'])
mchirp, eta = pnutils.mass1_mass2_to_mchirp_eta(mmass1, mmass2)
M = data['mass1'] + data['mass2']
q = maximum(data['mass1'] / data['mass2'], data['mass2'] / data['mass1'])
s1 = (data['spin1x']**2 + data['spin1y']**2 + data['spin1z']**2)**0.5
s2 = (data['spin2x']**2 + data['spin2y']**2 + data['spin2z']**2)**0.5

s81 = data['sigma1'] / 8
s82 = data['sigma2'] / 8

red_data = data[data['match'] > -0.5]
    
title = args.parameter_x + ' VS ' + args.parameter_y + ' colorbar '+ args.parameter_z

if args.parameter_x == 'mass1' and args.parameter_y == 'mass2':
    if args.parameter_z == 'time_offset':
        basic_scatter(args.output_plot, args.parameter_x, args.parameter_y, title, red_data[args.parameter_x], red_data[args.parameter_y], red_data[args.parameter_z], args.parameter_z, vmin=None, vmax=None)
    elif args.parameter_z == 'match':
        basic_scatter(args.output_plot, args.parameter_x, args.parameter_y, title, data[args.parameter_x], data[args.parameter_y], data[args.parameter_z], args.parameter_z, xmin=0, ymin=0)
        
        v1d = mmass1
        v2d = mmass2
        
        basic_scatter(args.output_plot2, args.parameter_x, args.parameter_y, title, v1d, v2d, data[args.parameter_z], args.parameter_z, xmin=0, ymin=0, majorL=5, minorL=1)
else:
    if args.parameter_x in bfields :
        v1d = data[args.parameter_x]
    if args.parameter_y in bfields :
        v2d = data[args.parameter_y]
    if args.parameter_z in bfields :
        v3d = data[args.parameter_z]

    if args.parameter_x == 'mass_ratio' :
        v1d = q

    if args.parameter_y == 'spin1_magnitude':
        v2d = s1

    if args.parameter_y == 'spin2_magnitude':
        v2d = s2

    if args.parameter_z == 'Mchirp':
        v3d = mchirp
    
    if args.parameter_y == 'total_mass':
        v2d = M

    if args.parameter_x == 'inclination':
        basic_scatter(args.output_plot, args.parameter_x, args.parameter_y, title, v1d, v2d, v3d, args.parameter_z, vmin=None, vmax=None)

    elif args.parameter_x == 'coa_phase':
        basic_scatter(args.output_plot, args.parameter_x, args.parameter_y, title, v1d, v2d, v3d, args.parameter_z,vmin=None, vmax=None, ymin=0)

    else:
        basic_scatter(args.output_plot, args.parameter_x, args.parameter_y, title, v1d, v2d, v3d, args.parameter_z)
