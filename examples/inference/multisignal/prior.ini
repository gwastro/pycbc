[model]
name = multi_signal
submodels = event1 event2

[event1__model]
name = gaussian_noise
low-frequency-cutoff = 18.0

[event2__model]
name = gaussian_noise
low-frequency-cutoff = ${event1__model|low-frequency-cutoff}

[variable_params]
# common parameters
srcmchirp =
q =
# parameters unique to event1
event1__delta_tc =
event1__ra =
event1__dec =
event1__coa_phase =

# parameters unique to event2
event2__delta_tc =
# We'll make event2's sky location be dependent on
# event1. We'll do that by making the variable
# parameter be a deviation from event1's sky location.
# The ra and dec for event2 will be set with a
# transform, below.
event2__dra =
event2__ddec =
event2__coa_phase =

[static_params]
approximant = IMRPhenomD
f_lower = 20
f_ref = 20
distance = 500
inclination = 0
polarization = 0

[prior-event2__coa_phase]
name = uniform_angle

[prior-event1__coa_phase]
name = uniform_angle

# Prior bounds taken from 4-OGC
[prior-srcmchirp]
name = mchirp_from_uniform_mass1_mass2
min-srcmchirp = 23
max-srcmchirp = 42

[prior-q]
name = q_from_uniform_mass1_mass2
min-q = 1.
max-q = 4.

[waveform_transforms-mass1+mass2]
name = custom
inputs = srcmchirp, q
mass1 = mass1_from_mchirp_q(srcmchirp,q) * (1 + 0.105)
mass2 = mass2_from_mchirp_q(srcmchirp,q) * (1 + 0.105)

[prior-event1__delta_tc]
name = uniform
min-event1__delta_tc = -0.1
max-event1__delta_tc = 0.1

[prior-event2__delta_tc]
name = uniform
min-event2__delta_tc = -0.1
max-event2__delta_tc = 0.1

# Note that the output of waveform transforms that output parameters specific
# to a particular sub-model must include that model's label in the parameter
# name, just as the variable and static params do.
[waveform_transforms-event1__tc]
name = custom
inputs = event1__delta_tc
event1__tc = 1126259462.430 + event1__delta_tc

[waveform_transforms-event2__tc]
name = custom
inputs = event2__delta_tc
event2__tc = 1126859462.0 + event2__delta_tc

# We'll use a uniform prior for the sky location of event1...
[prior-event1__ra+event1__dec]
name = uniform_sky
azimuthal-angle = event1__ra
polar-angle = event1__dec

# ...and a Gaussian centered on event1 for event2.
[prior-event2__dra+event2__ddec]
name = gaussian
event2__dra_mean = 0
event2__dra_var = 1
event2__ddec_mean = 0
event2__ddec_var = 1

[waveform_transforms-event2__ra+event2__dec]
name = custom
inputs = event1__ra, event1__dec, event2__dra, event2__ddec
event2__ra = event1__ra + event2__dra
event2__dec = event1__dec + event2__ddec

[constraint-event2dec]
name = custom
constraint_arg = (event1__dec + event2__ddec >= -pi/2) & (event1__dec + event2__ddec <= pi/2)

# We'll inject the simulated signals into fake noise generated with the aLIGO
# design sensitivity. We need two separate data sections, one for each event.
[event1_event2__data]
instruments = H1 L1
trigger-time = 1126859462.2
analysis-start-time = -6
analysis-end-time = 2
sample-rate = 2048
fake-strain = H1:aLIGOaLIGODesignSensitivityT1800044 L1:aLIGOaLIGODesignSensitivityT1800044
fake-strain-seed = H1:237 L1:82
psd-estimation = median-mean
psd-inverse-length = 8
psd-segment-length = 8
psd-segment-stride = 4
psd-start-time = -256
psd-end-time = 256
channel-name = H1:STRAIN L1:STRAIN
injection-file = combined_inj.hdf
strain-high-pass = 15
pad-data = 8

[sampler]
name = dynesty
dlogz = 0.1
nlive = 100
checkpoint_time_interval = 1800
maxcall = 10000
