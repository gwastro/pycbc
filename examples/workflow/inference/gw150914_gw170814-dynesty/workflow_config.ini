[workflow]
; basic information used by the workflow generator
file-retention-level = all_triggers
; The start/end times here are just used for file naming. They can be set
; to anything -- they aren't used for anything, and have no effect on the
; analysis. The actual analysis times used are set by the [data] section in
; the configuration files given to pycbc_inference (specified in the events
; config file).
start-time = 1126259200
end-time = 1126259600 

[workflow-ifos]
; The ifos listed here are just used for file naming, it doesn't matter if
; they are not consistent with the actual detectors analyzed.
h1 =
l1 =
v1 =

[extract_posterior]
; Here, we'll ensure that the output parameters are such that mass1 >= mass2
; (and associated spins), change comoving volume into redshift and distance,
; add mchirp, q, chi_eff, and chi_p to the posterior files.
parameters = 'primary_mass(srcmass1, srcmass2):srcmass1'
             'secondary_mass(srcmass1, srcmass2):srcmass2'
             'primary_spin(srcmass1, srcmass2, spin1_a, spin2_a):spin1_a'
             'primary_spin(srcmass1, srcmass2, spin1_azimuthal, spin2_azimuthal):spin1_azimuthal'
             'primary_spin(srcmass1, srcmass2, spin1_polar, spin2_polar):spin1_polar'
             'secondary_spin(srcmass1, srcmass2, spin1_a, spin2_a):spin2_a'
             'secondary_spin(srcmass1, srcmass2, spin1_azimuthal, spin2_azimuthal):spin2_azimuthal'
             'secondary_spin(srcmass1, srcmass2, spin1_polar, spin2_polar):spin2_polar'
             'mchirp_from_mass1_mass2(srcmass1, srcmass2):srcmchirp'
             'chi_eff_from_spherical(srcmass1, srcmass2, spin1_a, spin1_polar, spin2_a, spin2_polar):chi_eff'
             'chi_p_from_spherical(srcmass1, srcmass2, spin1_a, spin1_azimuthal, spin1_polar, spin2_a, spin2_azimuthal, spin2_polar):chi_p'
             'redshift_from_comoving_volume(comoving_volume):redshift'
             'distance_from_comoving_volume(comoving_volume):distance'
             '*'
force =

[workflow-summary_table]
; Parameters that will be printed in the summary table.
; These must be from the set specified in extract_posterior.
table-params = srcmass1 srcmass2
               srcmchirp 'q_from_mass1_mass2(srcmass1, srcmass2):q'
               chi_eff chi_p
               ra dec delta_tc
               distance redshift
               'snr_from_loglr(loglikelihood-lognl):SNR'
; The additional metadata will be printed below the table. We can print
; anything that is in the posterior files' attrs.
print-metadata = 'trigger_time:$t_0$' 'analyzed_detectors:Detectors'

[workflow-summary_plots]
; Parameter posteriors that will plotted on the summary page.
; These must be from the set specified in extract_posterior.
; Each plot-group corresponds to a single plot that will be plot on the
; summary page. Generally, these should be limited to 1 or 2 dimensions
; (although this is not enforced); larger corner plots can be put in the
; Posteriors page. The plots for those are set by the [workflow-plot_params]
; section (see below).
; The settings for the posterior plots created here are read from the
; [plot_posterior_summary] section.
plot-group-mass1_mass2 = srcmass1 srcmass2
plot-group-inc_distance = inclination distance
plot-group-chip_chieff = chi_p chi_eff
; Notice that we are not including ra and dec here. The sky map is
; created by [plot_skymap].

[workflow-plot_params]
; Parameter posteriors that will plotted on the "Posteriors" page.
; These must be from the set specified in extract_posterior.
; Each plot-group corresponds to a single plot that will be plot on the
; page. Since the events are split into their own sub-pages, it's ok to make
; large corner plots here (although too large and it will be hard to make
; out what each parameter is doing).
; The settings for the posterior plots created here are read from the
; [plot_posterior] section.
; Since we plotted source-frame masses on the summary page, here we'll
; plot detector-frame masses.
plot-group-masses = 'srcmass1/(1+redshift):mass1'
                    'srcmass2/(1+redshift):mass2'
                    'srcmchirp/(1+redshift):mchirp'
                    'q_from_mass1_mass2(srcmass1, srcmass2):q'
plot-group-spins = spin1_a spin2_a
                   spin1_azimuthal spin2_azimuthal
                   spin1_polar spin2_polar
                   chi_eff chi_p
plot-group-extrinsic = ra dec delta_tc polarization inclination distance redshift

[executables]
; paths to executables to use in workflow
inference = ${which:run_pycbc_inference}
extract_posterior = ${which:pycbc_inference_extract_samples}
plot_posterior = ${which:pycbc_inference_plot_posterior}
plot_posterior_summary = ${which:pycbc_inference_plot_posterior}
plot_prior = ${which:pycbc_inference_plot_prior}
table_summary = ${which:pycbc_inference_table_summary}
create_fits_file = ${which:pycbc_inference_create_fits}
plot_skymap = ${which:pycbc_inference_plot_skymap}
plot_spectrum = ${which:pycbc_plot_psd_file}
results_page = ${which:pycbc_make_html_page}
; diagnostic plots: at the moment, there are none for Dynesty

[pegasus_profile]
; +MaxRunTimeHours is needed for running on the ATLAS cluster; comment out
; if your cluster does not need this.
condor|+MaxRunTimeHours = 1

[pegasus_profile-inference]
condor|request_memory = 40G
; +MaxRunTimeHours is needed for running on the ATLAS cluster; comment out
; if your cluster does not need this.
condor|+MaxRunTimeHours = 10
condor|request_cpus = ${inference|nprocesses}

[pegasus_profile-plot_prior]
condor|request_memory = 4G

[pegasus_profile-plot_skymap]
condor|request_memory = 4G

[pegasus_profile-plot_posterior]
condor|request_memory = 4G

[pegasus_profile-plot_posterior_summary]
condor|request_memory = 4G

[pegasus_profile-plot_samples]
condor|request_memory = 4G

[inference]
; Command line options for pycbc_inference.
verbose =
; Set the nprocesses to the number of cores you want each job to use. The
; value you use is cluster dependent.
nprocesses = 64

[plot_posterior_summary]
; These are the command line options that will be passed to
; pycbc_inference_plot_posterior for creating the posterior plots on the
; summary page. These settings will cause density plots to be made.
plot-contours =
plot-marginal =
plot-density =
density-cmap = Blues
contour-color = black

[plot_posterior]
; These are the command line options that will be passed to
; pycbc_inference_plot_posterior for creating the posterior plots on the
; posteriors page. These settings will cause scatter plots to be made showing
; each point in the posterior, colored by the matched-filter SNR.
plot-contours =
plot-marginal =
plot-scatter =
z-arg = snr

[create_fits_file]
; These are the settings for creating a fits file, which is used to produce
; the skymaps. This program needs ligo.skymap to be installed.
; The maxpts option limits the number of points in the posterior that are used
; to create the skymap. This is mostly for speeding up run time. Comment out
; to use all points.
maxpts = 1000
; Since the posterior file stores delta_tc, we need to tell the fits
; file how to calculate tc
tc = 'trigger_time+delta_tc'

[plot_skymap]
; These are settings for creating the skymap. This program requires
; ligo.skymap to be installed. Here, we're just setting the colormap to be
; the same as the posterior density plots, above.
colormap = ${plot_posterior_summary|density-cmap}

[plot_prior]
; This sets command-line options to use for the plot prior function. These
; plots are on the "priors" page. The default (giving no options) is to
; plot all of the variable params.

[table_summary]
; This sets command-line options for the table on the summary page. You
; should not need to set anything here.

[plot_spectrum]
; This sets command-line options for the ASD plots on the detector sensitivity
; page. The dyn-range-factor needs to be set to 1.
dyn-range-factor = 1

[results_page]
; This sets settings for creating the results page. You may want to change
; the analysis title, to make it more descriptive.
analysis-title = "Inference results with dynesty"
