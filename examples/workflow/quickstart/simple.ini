# The configuration file allows us to control the workflow.
# It has 4 different kinds of sections.
#
# 1) [workflow] sections, which are reserved for author of a workflow to use
# and read to allow a place to make decisions about the flow of the workflow.
# It is not used in this quickstart example.
#
# 2) [executables] is reserved to map executable *keywords* provided in the
# workflow to the actual executables which are to be run. This means that
# different actual codes, if they have the same interface and accomplish the
# same task, can be switched between by simply choosing which executable here.
#
# 3) [exe key name], sections with the name of an executable key name allow
# you to provide options which all instances of that executable will get
#
# 4) [pegasus_profile], these section pass information to Pegasus / condor
# to indicate how to run the workflow on the cluster and requirements
# for jobs like memory and core useage. 

[workflow]

[executables]
argument_exe = /usr/bin/cp


# This is also an acceptable way to list this if the executable is 
# in your environment. This will be processed by the workflow configuration
# parsing code and replaced with the absolute path.
option_exe = ${which:option_exe} 

# Options supplied here go to all uses of these executables in the workflow
[argument_exe]
 
[option_exe]
# This will be converted to an option --append-text passed to all uses
# of this executable.
append-text = " We are appending this text to the output files!"

# options to configure how Pegasus will run the workflow can be put here
[pegasus_profile]
pycbc|submit-directory = ./

# options that tell how much resources a particular job needs can be put here
# The exe key name is appended. If not specified, whatever the default
# resource request of your cluster is used. 
[pegasus_profile-argument_exe]
# This example follows the condor format, any standard options from condor
# can be used.
condor|request_memory = 1000 
condor|request_cpus = 1
