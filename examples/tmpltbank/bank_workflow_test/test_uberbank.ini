; Configuration file for pycbc_create_uberbank_workflow
;
; Tests and decisions for the choices made here are documented here:
;
;    https://www.lsc-group.phys.uwm.edu/ligovirgo/cbcnote/PyCBC/O2TemplateBank
;
; Template bank documentation can be found here:
;
;    http://ligo-cbc.github.io/pycbc/latest/html/tmpltbank.html
;
; Documentation for the PyCBC workflow module is here:
;
;    http://ligo-cbc.github.io/pycbc/latest/html/workflow.html

[common]
; Main options shared by different sections are gathered here

; Noise PSDs for geometric and sbank jobs
psd-model = aLIGOZeroDetHighPower
low-frequency-cutoff = 10

; Spin bounds
max-bh-spin = 0.05
max-ns-spin = 0.01
nsbh-boundary = 2

[pegasus_profile]
condor|request_memory = 2000
condor|accounting_group = ligo.prod.o3.cbc.bbh.pycbcoffline
pycbc|primary_site = condorpool_symlink

[workflow]
; http://ligo-cbc.github.io/pycbc/latest/html/workflow/initialization.html

; Store only "merged_triggers" this means only final result files, and all key
; intermediate products.
file-retention-level = merged_triggers

; Start and end times are needed to obey LIGO file naming conventions. Actual
; values are irrelevant. This can be overriden on the command line.
; Here we use the times matching the estimated PSD so we have an immediate
; reference on the resulting bank file name
start-time = 1126051217
end-time = 1137254417

[workflow-bbh]
; Options in here go only to the first sbank workflow (currently tagged BBH)

; num-cycles is how many repetitions of the sbank parallelization -> recombine
; process will be done
num-cycles = 5

; nbanks is how many parallel jobs to use, setting this large no longer causes
; overcoverage *but* be careful that the templates generated by all nbanks is
; not that large that it causes memory issues when readding. You can limit the
; number of templates added by each job and then run more total cycles. For
; weird parameter space (e.g. precession) set number of cycles to a large
; value, use a good number of nbanks, but accept only 10-100 templates per job
; This let's the bank slowly converge while you can monitor the periodic
; output!
nbanks = 4

; seed-bank can be used to provide an input to sbank jobs
; seed-bank = /path/to/file

; If using seed-bank, this will instruct sbank to use this to determine the
; initial chirp-mass bins. In this case a coarse job is not run
; use-seed-bank-for-chirp-bins=

; If not giving a seed-bank the coarse job will be used as a seed for the first
; parallel stage. Give this option and the coarse job will not be used as a
; seed. Then it is only used to determine initial chirp-mass bins
; do-not-use-coarse-job-as-seed =

[workflow-final]
; Options in here go only to the second sbank workflow (currently tagged FINAL)

; See above for option descriptions
num-cycles = 5
nbanks = 10

; Here the seed-bank is set automatically by the workflow generator.

; Not using seed bank for the chirp-mass bins as it does not cover the full
; space
; use-seed-bank-for-chirp-bins=

[workflow-ifos]
; Need to specify the active ifos for file naming.
h1 =
l1 =

[executables]
; http://ligo-cbc.github.io/pycbc/latest/html/workflow/initialization.html

; All executables are listed here, will be equivalent to `which exe`
sbank = ${which:sbank}
sbank_workflow = ${which:pycbc_make_sbank_workflow}
sbank_mchirp_bins = ${which:sbank_hdf5_choose_mchirp_boundaries}
h5add = ${which:sbank_hdf5_bankcombiner}
geom_aligned_bank = ${which:pycbc_geom_aligned_bank}

; Then options for all executables are added. These are added directly to the
; jobs as described here:
;    http://ligo-cbc.github.io/pycbc/latest/html/workflow/initialization.html

[sbank_workflow]
; Options to the workflow generator

[llwadd]
; Global llwadd options, if any, go here

[geom_aligned_bank]
min-match = 0.90
random-seed = 1915
pn-order = threePointFivePN
f-low = 40
f-upper = 1024
delta-f = 0.01
min-mass1 = 1.
max-mass1 = 1.02
min-mass2 = 1.
max-mass2 = 1.02
filter-points =
min-total-mass = 2.
max-total-mass = 2.04
max-bh-spin-mag = ${common|max-bh-spin}
max-ns-spin-mag = ${common|max-ns-spin}
ns-bh-boundary-mass = ${common|nsbh-boundary}
psd-model = ${common|psd-model}
split-bank-num = 20

[sbank_mchirp_bins]
; These options are sent to the sbank_mchirp_bins jobs
template-weight = equal

[sbank]
; These options are sent to *all* sbank jobs
; Options sent to specific sbank jobs are give below. There must be *no*
; conflicts here. Ie. if an option appears here it *cannot* be overridden in
; any of the sub-sections below.

; PSD-related options
noise-model = ${common|psd-model}
; This refers to the instrument in the reference-psd file.
instrument = H1
; F-high is lower than this if the waveform power doesn't get this high
fhigh-max = 1024.
flow = ${common|low-frequency-cutoff}
optimize-flow = 0.995
; Options for output file
;no-f-final =
;flow-column = alpha6
; Waveform
approximant = IMRPhenomD
; Optimization choices
iterative-match-df-max = 8.0
cache-waveforms =

; Mass options common to sbank jobs
mass1-max = 8
mass2-max = 2
mtotal-max = 10

; Spin options common to sbank jobs
aligned-spin =
bh-spin-min = -${common|max-bh-spin}
bh-spin-max = ${common|max-bh-spin}
ns-spin-min = -${common|max-ns-spin}
ns-spin-max = ${common|max-ns-spin}
ns-bh-boundary-mass = ${common|nsbh-boundary}

duration-min = 0.15

[sbank-bbh]
; These options are sent to all sbank "BBH" jobs

; Mass/spin parameter options
mass1-min = 6.0
mass2-min = 1.0
mtotal-min = 7.0

[sbank-final]
; These options are sent to all sbank "FINAL" jobs

; Mass/spin parameter options
mass1-min = 1.0
mass2-min = 1.0
; SEOBNRv2's eta = 0.01 limit
mratio-max = 97.989

[sbank-bbh-coarse]
; These options are sent only to the initial sbank-coarse job for "FINAL".
match-min = 0.90
convergence-threshold = 50
max-new-templates = 100

[sbank-final-coarse]
; These options are sent only to the initial sbank-coarse job for "BBH".
; This one is not a seed!!!
match-min = 0.90
convergence-threshold = 200
max-new-templates = 100

[sbank-readder]
; These options are sent to all readder jobs

; Jobs should not terminate until all potential points are tried
convergence-threshold = 500000000
max-new-templates = 20000000000

[sbank-bbh-readder]
; These options are sent to all readder jobs for "BBH"
match-min = 0.90

[sbank-parallel-cycle0]
; parallel jobs, cycle0
convergence-threshold = 10
max-new-templates = 20

[sbank-parallel-cycle1]
; parallel jobs, cycle1
convergence-threshold = 10
max-new-templates = 20

[sbank-parallel-cycle2]
; parallel jobs, cycle2
convergence-threshold = 10
max-new-templates = 20

[sbank-parallel-cycle3]
; parallel jobs, cycle3
convergence-threshold = 10
max-new-templates = 20

[sbank-parallel-cycle4]
; parallel jobs, cycle4
convergence-threshold = 100
max-new-templates = 20

[sbank-parallel-bbh]
; BBH parallel jobs

; All use the same match-min
match-min = 0.90

[sbank-final-cycle0&sbank-final-cycle1]
; BBH parallel and readder jobs, cycles 0 and 1
match-min = 0.90

[sbank-final-cycle2&sbank-final-cycle3]
; BBH parallel and readder jobs, cycles 2 and 3
match-min = 0.90

[sbank-final-cycle4]
; BBH parallel and readder jobs, cycles 4 and 5
match-min = 0.90

